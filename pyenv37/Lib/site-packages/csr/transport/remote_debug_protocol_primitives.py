############################################################################
# CONFIDENTIAL
#
# Copyright (c) 2020 Qualcomm Technologies International, Ltd.
#   %%version
#
############################################################################
# This file implements the protocol defined in
# depot\hydra\main\common\interface\remote_debug.xml
# In future it may be autogenerated from the xml
# For format string syntax see 
# https://docs.python.org/3.8/library/struct.html?highlight=struct#struct-format-strings
from collections import namedtuple
import struct

class RemoteDebugProtocol(object):
    '''
    Python structures and methods implementing the protocol of remote_debug.xml
    Could be auto-generated from the xml in future
    '''
    header_tuple = namedtuple("header", "type, cmd_id, payload_length, tag")
    header_format = "<BBHH"
    
    cmd_type = {                        "transport_cmd":0,
                                        "debug_cmd":1,
                                        "routed_cmd":2  }
    debug_cmd_id = {                    "protocol_version_req":0,
                                        "protocol_version_rsp":1,
                                        "max_pdu_size_req":2,
                                        "max_pdu_size_rsp":3,
                                        "memory_read_req":4,
                                        "memory_read_rsp":5,
                                        "memory_write_req":6,
                                        "memory_write_rsp":7,
                                        "appcmd_req":8,
                                        "appcmd_rsp":9,
                                        "chip_reset_req":10,
                                        "chip_reset_rsp":11        } 
    tr_cmd_id = {                       "transport_version_req":1,
                                        "transport_version_rsp":2,
                                        "max_pdu_size_req":3,
                                        "max_pdu_size_rsp":4,
                                        "connection_info_req":5,
                                        "connection_info_rsp":6,
                                        "available_devices_req":7,
                                        "available_devices_rsp":8,
                                        "connect_req":9,
                                        "connect_rsp":10,
                                        "disconnect_req":11,
                                        "disconnect_rsp":12,
                                        "undeliverable_debug_cmd_rsp":13 }
    route_cmd_id = {                    "routed_request":0,
                                        "routed_response":1,
                                        "unroutable_response":2 }

    pdu_cmd_type_discriminant = {       0: tr_cmd_id, 
                                        1: debug_cmd_id,
                                        2: route_cmd_id }
    
    pdu_transport_version_rsp_tuple = namedtuple("transport_version_rsp", 
                "transport_type, major_version, minor_version, tertiary_version")
    pdu_transport_version_rsp_format = "<IIII"
    pdu_max_pdu_size_rsp_tuple = namedtuple("max_pdu_size_rsp", 
                "pdu_size_bytes, number_of_outstanding_packets")
    pdu_max_pdu_size_rsp_format = "<II"
    pdu_connection_info_rsp_tuple = namedtuple("connection_info_rsp",
                "status, connection_up_time, device_address")
    pdu_connection_info_rsp_format = "<II"
    pdu_available_devices_rsp_tuple = namedtuple("pdu_available_devices_rsp", "devices")
    pdu_connect_req_tuple = namedtuple("connect_req", "device")
    pdu_connect_rsp_tuple = namedtuple("connect_rsp", "status")
    pdu_connect_rsp_format = "<H"
    pdu_disconnect_rsp_tuple = namedtuple("disconnect_rsp", "status")
    pdu_disconnect_rsp_format = "<H"
    pdu_undeliverable_debug_cmd_rsp_tuple = namedtuple("undeliverable_debug_cmd_rsp", "status, type, command_id, tag")
    pdu_undeliverable_debug_cmd_rsp_format = "<IBBH"
    pdu_protocol_version_rsp_tuple = namedtuple("protocol_version_rsp", "protocol_version, capabilities, device_id, unused")
    pdu_protocol_version_rsp_format = "<IIBB"
    pdu_memory_read_req_tuple = namedtuple("memory_read_req",
                "subsystem_id, block_id, bytes_per_transaction, transaction_type, address, read_length_bytes")
    pdu_memory_read_req_format = "<BBBBII"
    pdu_memory_read_rsp_tuple = namedtuple("memory_read_rsp",
                "status, device_id, data_bytes")
    pdu_memory_read_rsp_format = "<BB"
    pdu_memory_write_req_tuple = namedtuple("memory_write_req",
                "subsystem_id, block_id, bytes_per_transaction, transaction_type, address, data_bytes")
    pdu_memory_write_req_format = "<BBBBI"
    pdu_memory_write_rsp_tuple = namedtuple("memory_write_rsp",
                "status, device_id")
    pdu_memory_write_rsp_format = "<BB"
    pdu_chip_reset_req_tuple = namedtuple("chip_rest_req", "reset_type")
    pdu_chip_reset_req_format = "<B"
    pdu_chip_reset_rsp_tuple = namedtuple("chip_rest_rsp", "reset_status")
    pdu_chip_reset_rsp_format = "<B"
    pdu_routed_request_tuple = namedtuple("routed_request", "request_routing, routed_type, routed_cmd_id, payload")
    pdu_routed_request_format = "<HBB"
    pdu_routed_response_tuple = namedtuple("routed_response", "response_routing, routed_type, routed_cmd_id, payload")
    pdu_routed_response_format = "<HBB"
    pdu_unroutable_response_tuple = namedtuple("unroutable_response", "request_routing, routed_type, routed_cmd_id, response_routing, reason")
    pdu_unroutable_response_format = "<HBBHB"

    def header_pack(self, *args):
        return struct.pack(self.header_format, *args)
    def header_unpack(self, data_bytes):
        return self.header_tuple._make(struct.unpack(self.header_format, data_bytes))
    def transport_version_rsp_payload_pack(self, *args):
        return struct.pack(self.pdu_transport_version_rsp_format, *args)
    def transport_version_rsp_payload_unpack(self, data_bytes):
        return self.pdu_transport_version_rsp_tuple._make(struct.unpack(self.pdu_transport_version_rsp_format, data_bytes))
    def pdu_max_pdu_size_rsp_payload_pack(self, *args):
        return struct.pack(self.pdu_max_pdu_size_rsp_format, *args)
    def pdu_max_pdu_size_rsp_payload_unpack(self, data_bytes):
        return self.pdu_max_pdu_size_rsp_tuple._make(struct.unpack(self.pdu_max_pdu_size_rsp_format, data_bytes))
    def pdu_connection_info_rsp_payload_pack(self, *args):
        return struct.pack(self.pdu_connection_info_rsp_format, *args[0:2]) + args[2]
    def pdu_connection_info_rsp_payload_unpack(self, data_bytes):
        return self.pdu_connection_info_rsp_tuple._make(struct.unpack(self.pdu_connection_info_rsp_format, data_bytes[0:8]) + (data_bytes[8:],))
    def pdu_connect_req_payload_pack(self, data_bytes):
        return data_bytes
    def pdu_connect_req_payload_unpack(self, data_bytes):
        return self.pdu_connect_req_tuple._make((data_bytes,))
    def pdu_connect_rsp_payload_pack(self, *args):
        return struct.pack(self.pdu_connect_rsp_format, *args)
    def pdu_connect_rsp_payload_unpack(self, data_bytes):
        return self.pdu_connect_rsp_tuple._make(struct.unpack(self.pdu_connect_rsp_format, data_bytes))
    def pdu_disconnect_rsp_payload_pack(self, *args):
        return struct.pack(self.pdu_disconnect_rsp_format, *args)
    def pdu_disconnect_rsp_payload_unpack(self, data_bytes):
        return self.pdu_disconnect_rsp_tuple._make(struct.unpack(self.pdu_disconnect_rsp_format, data_bytes))
    def pdu_available_devices_rsp_payload_pack(self, data_bytes):
        return data_bytes
    def pdu_available_devices_rsp_payload_unpack(self, data_bytes):
        return self.pdu_available_devices_rsp_tuple._make((data_bytes,))
    def pdu_undeliverable_debug_cmd_rsp_payload_pack(self, *args):
        return struct.pack(self.pdu_undeliverable_debug_cmd_rsp_format, *args)
    def pdu_undeliverable_debug_cmd_rsp_payload_unpack(self, data_bytes):
        return self.pdu_undeliverable_debug_cmd_rsp_tuple._make(struct.unpack(self.pdu_undeliverable_debug_cmd_rsp_format, data_bytes))
    def pdu_protocol_version_rsp_payload_pack(self, *args):
        return struct.pack(self.pdu_protocol_version_rsp_format, *args)
    def pdu_protocol_version_rsp_payload_unpack(self, data_bytes):
        return self.pdu_protocol_version_rsp_tuple._make(struct.unpack(self.pdu_protocol_version_rsp_format, data_bytes))
    def pdu_memory_read_req_payload_pack(self, *args):
        return struct.pack(self.pdu_memory_read_req_format, *args)
    def pdu_memory_read_req_payload_unpack(self, data_bytes):
        return self.pdu_memory_read_req_tuple._make(struct.unpack(self.pdu_memory_read_req_format, data_bytes))
    def pdu_memory_read_rsp_payload_pack(self, *args):
        return struct.pack(self.pdu_memory_read_rsp_format, *args[0:2]) + bytearray(args[2])
    def pdu_memory_read_rsp_payload_unpack(self, data_bytes):
        return self.pdu_memory_read_rsp_tuple._make(struct.unpack(self.pdu_memory_read_rsp_format, data_bytes[0:2]) + (data_bytes[2:],))
    def pdu_memory_write_req_payload_pack(self, *args):
        return struct.pack(self.pdu_memory_write_req_format, *args)
    def pdu_memory_write_req_payload_unpack(self, data_bytes):
        return self.pdu_memory_write_req_tuple._make(struct.unpack(self.pdu_memory_write_req_format, data_bytes[0:8]) + (data_bytes[8:],))
    def pdu_memory_write_rsp_payload_pack(self, *args):
        return struct.pack(self.pdu_memory_write_rsp_format, *args)
    def pdu_memory_write_rsp_payload_unpack(self, data_bytes):
        return self.pdu_memory_write_rsp_tuple._make(struct.unpack(self.pdu_memory_write_rsp_format, data_bytes))
    def pdu_chip_reset_req_payload_pack(self, *args):
        return struct.pack(self.pdu_chip_reset_req_format, *args)
    def pdu_chip_reset_req_payload_unpack(self, data_bytes):
        return self.pdu_chip_reset_req_tuple._make(struct.unpack(self.pdu_chip_reset_req_format, data_bytes))
    def pdu_chip_reset_rsp_payload_pack(self, *args):
        return struct.pack(self.pdu_chip_reset_rsp_format, *args)
    def pdu_chip_reset_rsp_payload_unpack(self, data_bytes):
        return self.pdu_chip_reset_rsp_tuple._make(struct.unpack(self.pdu_chip_reset_rsp_format, data_bytes))
    
    def pdu_routed_request_payload_unpack(self, data_bytes):
        return self.pdu_routed_request_tuple._make(struct.unpack(self.pdu_routed_request_format, data_bytes[0:4]) + (data_bytes[4:],))
    def pdu_routed_request_payload_pack(self, *args):
        return struct.pack(self.pdu_routed_request_format, *args[0:3]) + bytearray(args[3])
    def pdu_routed_response_payload_unpack(self, data_bytes):
        return self.pdu_routed_response_tuple._make(struct.unpack(self.pdu_routed_response_format, data_bytes[0:4]) + (data_bytes[4:],))
    def pdu_routed_response_payload_pack(self, *args):
        return struct.pack(self.pdu_routed_response_format, *args[0:3]) + bytearray(args[3])
    def pdu_unroutable_response_payload_unpack(self, data_bytes):
        return self.pdu_unroutable_response_tuple._make(struct.unpack(self.pdu_unroutable_response_format, data_bytes))
    def pdu_unroutable_response_payload_pack(self, *args):
        return struct.pack(self.pdu_unroutable_response_format, *args)

    control_payload_unpack_discriminant = {
        "transport_version_rsp" :         transport_version_rsp_payload_unpack,
        "max_pdu_size_rsp" :              pdu_max_pdu_size_rsp_payload_unpack,
        "connection_info_rsp" :           pdu_connection_info_rsp_payload_unpack,
        "available_devices_rsp" :         pdu_available_devices_rsp_payload_unpack,
        "connect_req" :                   pdu_connect_req_payload_unpack,
        "connect_rsp" :                   pdu_connect_rsp_payload_unpack,
        "disconnect_rsp" :                pdu_disconnect_rsp_payload_unpack,
        "undeliverable_debug_cmd_rsp" :   pdu_undeliverable_debug_cmd_rsp_payload_unpack  
        }
    control_payload_pack_discriminant = {
        "transport_version_rsp" :         transport_version_rsp_payload_pack,
        "max_pdu_size_rsp" :              pdu_max_pdu_size_rsp_payload_pack,
        "connection_info_rsp" :           pdu_connection_info_rsp_payload_pack,
        "available_devices_rsp" :         pdu_available_devices_rsp_payload_pack,
        "connect_req" :                   pdu_connect_req_payload_pack,
        "connect_rsp" :                   pdu_connect_rsp_payload_pack,
        "disconnect_rsp" :                pdu_disconnect_rsp_payload_pack,
        "undeliverable_debug_cmd_rsp" :   pdu_undeliverable_debug_cmd_rsp_payload_pack  
        }
    debug_payload_unpack_discriminant = {
        "protocol_version_rsp"            :pdu_protocol_version_rsp_payload_unpack,
        "max_pdu_size_rsp"                :pdu_max_pdu_size_rsp_payload_unpack,
        "memory_read_req"                 :pdu_memory_read_req_payload_unpack,
        "memory_read_rsp"                 :pdu_memory_read_rsp_payload_unpack,
        "memory_write_req"                :pdu_memory_write_req_payload_unpack,
        "memory_write_rsp"                :pdu_memory_write_rsp_payload_unpack,
        #"appcmd_req"                      :appcmd_payload_unpack,
        #"appcmd_rsp"                      :appcmd_payload_unpack,
        "chip_reset_req"                  :pdu_chip_reset_req_payload_unpack,
        "chip_reset_rsp"                  :pdu_chip_reset_rsp_payload_unpack,    
        }
    debug_payload_pack_discriminant = {
        "protocol_version_rsp"            :pdu_protocol_version_rsp_payload_pack,
        "max_pdu_size_rsp"                :pdu_max_pdu_size_rsp_payload_pack,
        "memory_read_req"                 :pdu_memory_read_req_payload_pack,
        "memory_read_rsp"                 :pdu_memory_read_rsp_payload_pack,
        "memory_write_req"                :pdu_memory_write_req_payload_pack,
        "memory_write_rsp"                :pdu_memory_write_rsp_payload_pack,
        #"appcmd_req"                      :appcmd_payload_pack,
        #"appcmd_rsp"                      :appcmd_payload_pack,
        "chip_reset_req"                  :pdu_chip_reset_req_payload_pack,
        "chip_reset_rsp"                  :pdu_chip_reset_rsp_payload_pack,    
        }
    route_payload_unpack_discriminant = {
        "routed_request"                  : pdu_routed_request_payload_unpack,
        "routed_response"                 : pdu_routed_response_payload_unpack,
        "unroutable_response"             : pdu_unroutable_response_payload_unpack,
    }
    route_payload_pack_discriminant = {
        "routed_request"                  : pdu_routed_request_payload_pack,
        "routed_response"                 : pdu_routed_response_payload_pack,
        "unroutable_response"             : pdu_unroutable_response_payload_pack,
    }
    pdu_type_cmd_unpack_fn = {          0: control_payload_unpack_discriminant,
                                        1: debug_payload_unpack_discriminant,
                                        2: route_payload_unpack_discriminant}
    pdu_type_cmd_pack_fn = {            0: control_payload_pack_discriminant,
                                        1: debug_payload_pack_discriminant,
                                        2: route_payload_pack_discriminant}

    trb_status_id = {
        "no_error"              : 0,
        "subsystem_power_off"   : 1,
        "subsystem_asleep"      : 2,
        "routing_error"         : 3,
        "lock_error"            : 4,
        "debug_timeout"         : 10,
        "access_protection"     : 11,
        "no_memory_here"        : 12,
        "wrong_length"          : 13,
        "not_writable"          : 14,
        "bad_alignment"         : 15,
        }

    connection_status = {
        "disconnected"          : 0,
        "connected"             : 1,
        }

    connect_status = {
        "success"               : 0,
        "refused"               : 1,
        "timeout"               : 2,
        }

    disconnection_status = {
        "success"               : 0,
        "not_connected"         : 1,
        "timeout"               : 2,
        }

    undeliverable_status = {
          "not_connected"                  : 1,
          "link_timeout"                   : 2,
          "link_disconnected_by_device"    : 3,
          "feature_not_supported"          : 4,
        }

    remote_debug_device_id_t = {
        "single_device"         : 0,
        "left"                  : 1,
        "right"                 : 2,
    }

    capabilities_bitmap_mask = {
        "supports_routing"      : 1,
    }

    routed_req_route_t = {
        "primary"               : 0,
        "secondary"             : 1,
        "left"                  : 16,
        "right"                 : 17,
        }

    routed_resp_route_t = {
        "left_primary"          : 0,
        "left_secondary"        : 1,
        "right_primary"         : 16,
        "right_secondary"       : 17,
        }

    routed_reason = {
        "handover"              : 0,
        "link_lost"             : 1,
        "link_closed"           : 2,
        "not_supported"         : 3,
        }

 
# %%
