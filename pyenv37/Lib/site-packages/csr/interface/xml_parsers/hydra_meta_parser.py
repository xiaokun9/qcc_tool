#!/usr/bin/env python
# -*- coding: utf-8 -*-
############################################################################
# CONFIDENTIAL
#
# Copyright (c) 2013 - 2016 Qualcomm Technologies International, Ltd.
#   %%version
#
############################################################################

#
# Generated Wed May  1 16:11:38 2013 by generateDS.py version 2.9a.
#
from csr.wheels import gstrm
from csr.wheels.global_streams import iprint
import sys
import getopt
import re as re_
import base64
from datetime import datetime, tzinfo, timedelta

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        iprint("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            iprint("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                iprint("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    iprint("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        iprint("running with ElementTree")
                except ImportError:
                    raise ImportError(
                        "Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(tzinfo):
            def __init__(self, offset, name):
                self.__offset = timedelta(minutes = offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return input_data
        def gds_validate_datetime(self, input_data, node, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = input_data.strftime('%Y-%m-%dT%H:%M:%S')
            else:
                _svalue = input_data.strftime('%Y-%m-%dT%H:%M:%S.%f')
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_parse_datetime(self, input_data, node, input_name=''):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'GMT')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime.strptime(
                        input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime.strptime(
                        input_data, '%Y-%m-%dT%H:%M:%S')
            return dt.replace(tzinfo = tz)

        def gds_validate_date(self, input_data, node, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = input_data.strftime('%Y-%m-%d')
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_parse_date(self, input_data, node, input_name=''):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'GMT')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            return datetime.strptime(input_data,
                '%Y-%m-%d').replace(tzinfo = tz)
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (
            msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' %
                (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' %
                (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' %
                (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' %
                (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' %
                (self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n'
                % (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n'
                % (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class struct_def(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, struct_name=None, structure_element=None):
        self.struct_name = _cast(None, struct_name)
        if structure_element is None:
            self.structure_element = []
        else:
            self.structure_element = structure_element
    def factory(*args_, **kwargs_):
        if struct_def.subclass:
            return struct_def.subclass(*args_, **kwargs_)
        else:
            return struct_def(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_structure_element(self): return self.structure_element
    def set_structure_element(self, structure_element): self.structure_element = structure_element
    def add_structure_element(self, value): self.structure_element.append(value)
    def insert_structure_element(self, index, value): self.structure_element[index] = value
    def get_struct_name(self): return self.struct_name
    def set_struct_name(self, struct_name): self.struct_name = struct_name
    def validate_notEmptyString(self, value):
        # Validate type notEmptyString, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (
            self.structure_element
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='struct_def', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='struct_def')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='struct_def'):
        if self.struct_name is not None and 'struct_name' not in already_processed:
            already_processed.add('struct_name')
            outfile.write(' struct_name=%s' % (quote_attrib(self.struct_name), ))
    def exportChildren(self, outfile, level, namespace_='', name_='struct_def', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for structure_element_ in self.structure_element:
            structure_element_.export(outfile, level, namespace_, name_='structure_element', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='struct_def'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.struct_name is not None and 'struct_name' not in already_processed:
            already_processed.add('struct_name')
            showIndent(outfile, level)
            outfile.write('struct_name = "%s",\n' % (self.struct_name,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('structure_element=[\n')
        level += 1
        for structure_element_ in self.structure_element:
            showIndent(outfile, level)
            outfile.write('model_.structure_elementType(\n')
            structure_element_.exportLiteral(outfile, level, name_='structure_elementType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('struct_name', node)
        if value is not None and 'struct_name' not in already_processed:
            already_processed.add('struct_name')
            self.struct_name = value
            self.validate_notEmptyString(self.struct_name)    # validate type notEmptyString
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'structure_element':
            obj_ = structure_elementType.factory()
            obj_.build(child_)
            self.structure_element.append(obj_)
# end class struct_def


class enum_def(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, enum_name=None, enum_entry=None):
        self.enum_name = _cast(None, enum_name)
        if enum_entry is None:
            self.enum_entry = []
        else:
            self.enum_entry = enum_entry
    def factory(*args_, **kwargs_):
        if enum_def.subclass:
            return enum_def.subclass(*args_, **kwargs_)
        else:
            return enum_def(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_enum_entry(self): return self.enum_entry
    def set_enum_entry(self, enum_entry): self.enum_entry = enum_entry
    def add_enum_entry(self, value): self.enum_entry.append(value)
    def insert_enum_entry(self, index, value): self.enum_entry[index] = value
    def get_enum_name(self): return self.enum_name
    def set_enum_name(self, enum_name): self.enum_name = enum_name
    def validate_notEmptyString(self, value):
        # Validate type notEmptyString, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (
            self.enum_entry
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='enum_def', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='enum_def')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='enum_def'):
        if self.enum_name is not None and 'enum_name' not in already_processed:
            already_processed.add('enum_name')
            outfile.write(' enum_name=%s' % (quote_attrib(self.enum_name), ))
    def exportChildren(self, outfile, level, namespace_='', name_='enum_def', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for enum_entry_ in self.enum_entry:
            enum_entry_.export(outfile, level, namespace_, name_='enum_entry', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='enum_def'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.enum_name is not None and 'enum_name' not in already_processed:
            already_processed.add('enum_name')
            showIndent(outfile, level)
            outfile.write('enum_name = "%s",\n' % (self.enum_name,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('enum_entry=[\n')
        level += 1
        for enum_entry_ in self.enum_entry:
            showIndent(outfile, level)
            outfile.write('model_.enum_entryType(\n')
            enum_entry_.exportLiteral(outfile, level, name_='enum_entryType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('enum_name', node)
        if value is not None and 'enum_name' not in already_processed:
            already_processed.add('enum_name')
            self.enum_name = value
            self.validate_notEmptyString(self.enum_name)    # validate type notEmptyString
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'enum_entry':
            obj_ = enum_entryType.factory()
            obj_.build(child_)
            self.enum_entry.append(obj_)
# end class enum_def


class default(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, index2=None, index3=None, index1=None, valueOf_=None):
        self.index2 = _cast(None, index2)
        self.index3 = _cast(None, index3)
        self.index1 = _cast(None, index1)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if default.subclass:
            return default.subclass(*args_, **kwargs_)
        else:
            return default(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_index2(self): return self.index2
    def set_index2(self, index2): self.index2 = index2
    def get_index3(self): return self.index3
    def set_index3(self, index3): self.index3 = index3
    def get_index1(self): return self.index1
    def set_index1(self, index1): self.index1 = index1
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='default', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='default')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='default'):
        if self.index2 is not None and 'index2' not in already_processed:
            already_processed.add('index2')
            outfile.write(' index2=%s' % (self.gds_format_string(quote_attrib(self.index2).encode(ExternalEncoding), input_name='index2'), ))
        if self.index3 is not None and 'index3' not in already_processed:
            already_processed.add('index3')
            outfile.write(' index3=%s' % (self.gds_format_string(quote_attrib(self.index3).encode(ExternalEncoding), input_name='index3'), ))
        if self.index1 is not None and 'index1' not in already_processed:
            already_processed.add('index1')
            outfile.write(' index1=%s' % (self.gds_format_string(quote_attrib(self.index1).encode(ExternalEncoding), input_name='index1'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='default', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='default'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.index2 is not None and 'index2' not in already_processed:
            already_processed.add('index2')
            showIndent(outfile, level)
            outfile.write('index2 = "%s",\n' % (self.index2,))
        if self.index3 is not None and 'index3' not in already_processed:
            already_processed.add('index3')
            showIndent(outfile, level)
            outfile.write('index3 = "%s",\n' % (self.index3,))
        if self.index1 is not None and 'index1' not in already_processed:
            already_processed.add('index1')
            showIndent(outfile, level)
            outfile.write('index1 = "%s",\n' % (self.index1,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('index2', node)
        if value is not None and 'index2' not in already_processed:
            already_processed.add('index2')
            self.index2 = value
        value = find_attr_value_('index3', node)
        if value is not None and 'index3' not in already_processed:
            already_processed.add('index3')
            self.index3 = value
        value = find_attr_value_('index1', node)
        if value is not None and 'index1' not in already_processed:
            already_processed.add('index1')
            self.index1 = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class default


class default_list(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, default=None):
        if default is None:
            self.default = []
        else:
            self.default = default
    def factory(*args_, **kwargs_):
        if default_list.subclass:
            return default_list.subclass(*args_, **kwargs_)
        else:
            return default_list(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_default(self): return self.default
    def set_default(self, default): self.default = default
    def add_default(self, value): self.default.append(value)
    def insert_default(self, index, value): self.default[index] = value
    def hasContent_(self):
        if (
            self.default
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='default_list', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='default_list')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='default_list'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='default_list', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for default_ in self.default:
            default_.export(outfile, level, namespace_, name_='default', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='default_list'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('default=[\n')
        level += 1
        for default_ in self.default:
            showIndent(outfile, level)
            outfile.write('model_.default(\n')
            default_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'default':
            obj_ = default.factory()
            obj_.build(child_)
            self.default.append(obj_)
# end class default_list


class function(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, is_for_vif=None, type_=None, function_name=None):
        self.is_for_vif = _cast(bool, is_for_vif)
        self.type_ = _cast(None, type_)
        self.function_name = _cast(None, function_name)
        pass
    def factory(*args_, **kwargs_):
        if function.subclass:
            return function.subclass(*args_, **kwargs_)
        else:
            return function(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_is_for_vif(self): return self.is_for_vif
    def set_is_for_vif(self, is_for_vif): self.is_for_vif = is_for_vif
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def validate_function_type_enum(self, value):
        # Validate type function_type_enum, a restriction on xs:string.
        pass
    def get_function_name(self): return self.function_name
    def set_function_name(self, function_name): self.function_name = function_name
    def validate_notEmptyString(self, value):
        # Validate type notEmptyString, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='function', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='function')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='function'):
        if self.is_for_vif is not None and 'is_for_vif' not in already_processed:
            already_processed.add('is_for_vif')
            outfile.write(' is_for_vif="%s"' % self.gds_format_boolean(self.is_for_vif, input_name='is_for_vif'))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (quote_attrib(self.type_), ))
        if self.function_name is not None and 'function_name' not in already_processed:
            already_processed.add('function_name')
            outfile.write(' function_name=%s' % (quote_attrib(self.function_name), ))
    def exportChildren(self, outfile, level, namespace_='', name_='function', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='function'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.is_for_vif is not None and 'is_for_vif' not in already_processed:
            already_processed.add('is_for_vif')
            showIndent(outfile, level)
            outfile.write('is_for_vif = %s,\n' % (self.is_for_vif,))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            showIndent(outfile, level)
            outfile.write('type_ = "%s",\n' % (self.type_,))
        if self.function_name is not None and 'function_name' not in already_processed:
            already_processed.add('function_name')
            showIndent(outfile, level)
            outfile.write('function_name = "%s",\n' % (self.function_name,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('is_for_vif', node)
        if value is not None and 'is_for_vif' not in already_processed:
            already_processed.add('is_for_vif')
            if value in ('true', '1'):
                self.is_for_vif = True
            elif value in ('false', '0'):
                self.is_for_vif = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
            self.validate_function_type_enum(self.type_)    # validate type function_type_enum
        value = find_attr_value_('function_name', node)
        if value is not None and 'function_name' not in already_processed:
            already_processed.add('function_name')
            self.function_name = value
            self.validate_notEmptyString(self.function_name)    # validate type notEmptyString
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class function


class function_list(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, function=None):
        if function is None:
            self.function = []
        else:
            self.function = function
    def factory(*args_, **kwargs_):
        if function_list.subclass:
            return function_list.subclass(*args_, **kwargs_)
        else:
            return function_list(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_function(self): return self.function
    def set_function(self, function): self.function = function
    def add_function(self, value): self.function.append(value)
    def insert_function(self, index, value): self.function[index] = value
    def hasContent_(self):
        if (
            self.function
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='function_list', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='function_list')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='function_list'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='function_list', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for function_ in self.function:
            function_.export(outfile, level, namespace_, name_='function', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='function_list'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('function=[\n')
        level += 1
        for function_ in self.function:
            showIndent(outfile, level)
            outfile.write('model_.function(\n')
            function_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'function':
            obj_ = function.factory()
            obj_.build(child_)
            self.function.append(obj_)
# end class function_list


class index1(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None):
        self.name = _cast(None, name)
        pass
    def factory(*args_, **kwargs_):
        if index1.subclass:
            return index1.subclass(*args_, **kwargs_)
        else:
            return index1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def validate_notEmptyString(self, value):
        # Validate type notEmptyString, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='index1', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='index1')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='index1'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (quote_attrib(self.name), ))
    def exportChildren(self, outfile, level, namespace_='', name_='index1', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='index1'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
            self.validate_notEmptyString(self.name)    # validate type notEmptyString
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class index1


class index2(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None):
        self.name = _cast(None, name)
        pass
    def factory(*args_, **kwargs_):
        if index2.subclass:
            return index2.subclass(*args_, **kwargs_)
        else:
            return index2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def validate_notEmptyString(self, value):
        # Validate type notEmptyString, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='index2', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='index2')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='index2'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (quote_attrib(self.name), ))
    def exportChildren(self, outfile, level, namespace_='', name_='index2', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='index2'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
            self.validate_notEmptyString(self.name)    # validate type notEmptyString
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class index2


class index3(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None):
        self.name = _cast(None, name)
        pass
    def factory(*args_, **kwargs_):
        if index3.subclass:
            return index3.subclass(*args_, **kwargs_)
        else:
            return index3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def validate_notEmptyString(self, value):
        # Validate type notEmptyString, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='index3', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='index3')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='index3'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (quote_attrib(self.name), ))
    def exportChildren(self, outfile, level, namespace_='', name_='index3', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='index3'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
            self.validate_notEmptyString(self.name)    # validate type notEmptyString
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class index3


class config_element(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, psid=None, name=None, label=None, category=None, description_user=None, description_internal=None, additional_information=None, default=None, default_list=None, oid=None, source_reference=None, source_default=None, units=None, access_rights=None, is_internal=None, type_=None, format=None, is_array=None, range_min=None, range_max=None, table_name=None, function=None, function_list=None):
        self.psid = _cast(int, psid)
        self.name = _cast(None, name)
        self.label = label
        self.category = category
        self.description_user = description_user
        self.description_internal = description_internal
        self.additional_information = additional_information
        self.default = default
        self.default_list = default_list
        self.oid = oid
        self.source_reference = source_reference
        self.source_default = source_default
        self.units = units
        self.access_rights = access_rights
        self.is_internal = is_internal
        self.type_ = type_
        self.format = format
        self.is_array = is_array
        self.range_min = range_min
        self.range_max = range_max
        self.table_name = table_name
        self.function = function
        self.function_list = function_list
    def factory(*args_, **kwargs_):
        if config_element.subclass:
            return config_element.subclass(*args_, **kwargs_)
        else:
            return config_element(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_label(self): return self.label
    def set_label(self, label): self.label = label
    def get_category(self): return self.category
    def set_category(self, category): self.category = category
    def get_description_user(self): return self.description_user
    def set_description_user(self, description_user): self.description_user = description_user
    def get_description_internal(self): return self.description_internal
    def set_description_internal(self, description_internal): self.description_internal = description_internal
    def get_additional_information(self): return self.additional_information
    def set_additional_information(self, additional_information): self.additional_information = additional_information
    def get_default(self): return self.default
    def set_default(self, default): self.default = default
    def get_default_list(self): return self.default_list
    def set_default_list(self, default_list): self.default_list = default_list
    def get_oid(self): return self.oid
    def set_oid(self, oid): self.oid = oid
    def get_source_reference(self): return self.source_reference
    def set_source_reference(self, source_reference): self.source_reference = source_reference
    def get_source_default(self): return self.source_default
    def set_source_default(self, source_default): self.source_default = source_default
    def get_units(self): return self.units
    def set_units(self, units): self.units = units
    def get_access_rights(self): return self.access_rights
    def set_access_rights(self, access_rights): self.access_rights = access_rights
    def get_is_internal(self): return self.is_internal
    def set_is_internal(self, is_internal): self.is_internal = is_internal
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_format(self): return self.format
    def set_format(self, format): self.format = format
    def get_is_array(self): return self.is_array
    def set_is_array(self, is_array): self.is_array = is_array
    def get_range_min(self): return self.range_min
    def set_range_min(self, range_min): self.range_min = range_min
    def get_range_max(self): return self.range_max
    def set_range_max(self, range_max): self.range_max = range_max
    def get_table_name(self): return self.table_name
    def set_table_name(self, table_name): self.table_name = table_name
    def get_function(self): return self.function
    def set_function(self, function): self.function = function
    def get_function_list(self): return self.function_list
    def set_function_list(self, function_list): self.function_list = function_list
    def get_psid(self): return self.psid
    def set_psid(self, psid): self.psid = psid
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def validate_notEmptyString(self, value):
        # Validate type notEmptyString, a restriction on xs:string.
        pass
    def hasContent_(self):
        if (
            self.label is not None or
            self.category is not None or
            self.description_user is not None or
            self.description_internal is not None or
            self.additional_information is not None or
            self.default is not None or
            self.default_list is not None or
            self.oid is not None or
            self.source_reference is not None or
            self.source_default is not None or
            self.units is not None or
            self.access_rights is not None or
            self.is_internal is not None or
            self.type_ is not None or
            self.format is not None or
            self.is_array is not None or
            self.range_min is not None or
            self.range_max is not None or
            self.table_name is not None or
            self.function is not None or
            self.function_list is not None
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='config_element', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='config_element')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='config_element'):
        if self.psid is not None and 'psid' not in already_processed:
            already_processed.add('psid')
            outfile.write(' psid="%s"' % self.gds_format_integer(self.psid, input_name='psid'))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (quote_attrib(self.name), ))
    def exportChildren(self, outfile, level, namespace_='', name_='config_element', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.label is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slabel>%s</%slabel>%s' % (namespace_, self.gds_format_string(quote_xml(self.label).encode(ExternalEncoding), input_name='label'), namespace_, eol_))
        if self.category is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scategory>%s</%scategory>%s' % (namespace_, self.gds_format_string(quote_xml(self.category).encode(ExternalEncoding), input_name='category'), namespace_, eol_))
        if self.description_user is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription_user>%s</%sdescription_user>%s' % (namespace_, self.gds_format_string(quote_xml(self.description_user).encode(ExternalEncoding), input_name='description_user'), namespace_, eol_))
        if self.description_internal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription_internal>%s</%sdescription_internal>%s' % (namespace_, self.gds_format_string(quote_xml(self.description_internal).encode(ExternalEncoding), input_name='description_internal'), namespace_, eol_))
        if self.additional_information is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sadditional_information>%s</%sadditional_information>%s' % (namespace_, self.gds_format_string(quote_xml(self.additional_information).encode(ExternalEncoding), input_name='additional_information'), namespace_, eol_))
        if self.default is not None:
            self.default.export(outfile, level, namespace_, name_='default', pretty_print=pretty_print)
        if self.default_list is not None:
            self.default_list.export(outfile, level, namespace_, name_='default_list', pretty_print=pretty_print)
        if self.oid is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soid>%s</%soid>%s' % (namespace_, self.gds_format_string(quote_xml(self.oid).encode(ExternalEncoding), input_name='oid'), namespace_, eol_))
        if self.source_reference is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssource_reference>%s</%ssource_reference>%s' % (namespace_, self.gds_format_string(quote_xml(self.source_reference).encode(ExternalEncoding), input_name='source_reference'), namespace_, eol_))
        if self.source_default is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssource_default>%s</%ssource_default>%s' % (namespace_, self.gds_format_string(quote_xml(self.source_default).encode(ExternalEncoding), input_name='source_default'), namespace_, eol_))
        if self.units is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sunits>%s</%sunits>%s' % (namespace_, self.gds_format_string(quote_xml(self.units).encode(ExternalEncoding), input_name='units'), namespace_, eol_))
        if self.access_rights is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%saccess_rights>%s</%saccess_rights>%s' % (namespace_, self.gds_format_string(quote_xml(self.access_rights).encode(ExternalEncoding), input_name='access_rights'), namespace_, eol_))
        if self.is_internal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sis_internal>%s</%sis_internal>%s' % (namespace_, self.gds_format_boolean(self.is_internal, input_name='is_internal'), namespace_, eol_))
        if self.type_ is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stype>%s</%stype>%s' % (namespace_, self.gds_format_string(quote_xml(self.type_).encode(ExternalEncoding), input_name='type'), namespace_, eol_))
        if self.format is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sformat>%s</%sformat>%s' % (namespace_, self.gds_format_string(quote_xml(self.format).encode(ExternalEncoding), input_name='format'), namespace_, eol_))
        if self.is_array is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sis_array>%s</%sis_array>%s' % (namespace_, self.gds_format_boolean(self.is_array, input_name='is_array'), namespace_, eol_))
        if self.range_min is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srange_min>%s</%srange_min>%s' % (namespace_, self.gds_format_integer(self.range_min, input_name='range_min'), namespace_, eol_))
        if self.range_max is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srange_max>%s</%srange_max>%s' % (namespace_, self.gds_format_integer(self.range_max, input_name='range_max'), namespace_, eol_))
        if self.table_name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stable_name>%s</%stable_name>%s' % (namespace_, self.gds_format_string(quote_xml(self.table_name).encode(ExternalEncoding), input_name='table_name'), namespace_, eol_))
        if self.function is not None:
            self.function.export(outfile, level, namespace_, name_='function', pretty_print=pretty_print)
        if self.function_list is not None:
            self.function_list.export(outfile, level, namespace_, name_='function_list', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='config_element'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.psid is not None and 'psid' not in already_processed:
            already_processed.add('psid')
            showIndent(outfile, level)
            outfile.write('psid = %d,\n' % (self.psid,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.label is not None:
            showIndent(outfile, level)
            outfile.write('label=%s,\n' % quote_python(self.label).encode(ExternalEncoding))
        if self.category is not None:
            showIndent(outfile, level)
            outfile.write('category=%s,\n' % quote_python(self.category).encode(ExternalEncoding))
        if self.description_user is not None:
            showIndent(outfile, level)
            outfile.write('description_user=%s,\n' % quote_python(self.description_user).encode(ExternalEncoding))
        if self.description_internal is not None:
            showIndent(outfile, level)
            outfile.write('description_internal=%s,\n' % quote_python(self.description_internal).encode(ExternalEncoding))
        if self.additional_information is not None:
            showIndent(outfile, level)
            outfile.write('additional_information=%s,\n' % quote_python(self.additional_information).encode(ExternalEncoding))
        if self.default is not None:
            showIndent(outfile, level)
            outfile.write('default=model_.default(\n')
            self.default.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.default_list is not None:
            showIndent(outfile, level)
            outfile.write('default_list=model_.default_list(\n')
            self.default_list.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.oid is not None:
            showIndent(outfile, level)
            outfile.write('oid=%s,\n' % quote_python(self.oid).encode(ExternalEncoding))
        if self.source_reference is not None:
            showIndent(outfile, level)
            outfile.write('source_reference=%s,\n' % quote_python(self.source_reference).encode(ExternalEncoding))
        if self.source_default is not None:
            showIndent(outfile, level)
            outfile.write('source_default=%s,\n' % quote_python(self.source_default).encode(ExternalEncoding))
        if self.units is not None:
            showIndent(outfile, level)
            outfile.write('units=%s,\n' % quote_python(self.units).encode(ExternalEncoding))
        if self.access_rights is not None:
            showIndent(outfile, level)
            outfile.write('access_rights=%s,\n' % quote_python(self.access_rights).encode(ExternalEncoding))
        if self.is_internal is not None:
            showIndent(outfile, level)
            outfile.write('is_internal=%s,\n' % self.is_internal)
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('type_=%s,\n' % quote_python(self.type_).encode(ExternalEncoding))
        if self.format is not None:
            showIndent(outfile, level)
            outfile.write('format=%s,\n' % quote_python(self.format).encode(ExternalEncoding))
        if self.is_array is not None:
            showIndent(outfile, level)
            outfile.write('is_array=%s,\n' % self.is_array)
        if self.range_min is not None:
            showIndent(outfile, level)
            outfile.write('range_min=%d,\n' % self.range_min)
        if self.range_max is not None:
            showIndent(outfile, level)
            outfile.write('range_max=%d,\n' % self.range_max)
        if self.table_name is not None:
            showIndent(outfile, level)
            outfile.write('table_name=%s,\n' % quote_python(self.table_name).encode(ExternalEncoding))
        if self.function is not None:
            showIndent(outfile, level)
            outfile.write('function=model_.function(\n')
            self.function.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.function_list is not None:
            showIndent(outfile, level)
            outfile.write('function_list=model_.function_list(\n')
            self.function_list.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('psid', node)
        if value is not None and 'psid' not in already_processed:
            already_processed.add('psid')
            try:
                self.psid = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
            self.validate_notEmptyString(self.name)    # validate type notEmptyString
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'label':
            label_ = child_.text
            label_ = self.gds_validate_string(label_, node, 'label')
            self.label = label_
        elif nodeName_ == 'category':
            category_ = child_.text
            category_ = self.gds_validate_string(category_, node, 'category')
            self.category = category_
        elif nodeName_ == 'description_user':
            description_user_ = child_.text
            description_user_ = self.gds_validate_string(description_user_, node, 'description_user')
            self.description_user = description_user_
        elif nodeName_ == 'description_internal':
            description_internal_ = child_.text
            description_internal_ = self.gds_validate_string(description_internal_, node, 'description_internal')
            self.description_internal = description_internal_
        elif nodeName_ == 'additional_information':
            additional_information_ = child_.text
            additional_information_ = self.gds_validate_string(additional_information_, node, 'additional_information')
            self.additional_information = additional_information_
        elif nodeName_ == 'default':
            obj_ = default.factory()
            obj_.build(child_)
            self.set_default(obj_)
        elif nodeName_ == 'default_list':
            obj_ = default_list.factory()
            obj_.build(child_)
            self.set_default_list(obj_)
        elif nodeName_ == 'oid':
            oid_ = child_.text
            oid_ = self.gds_validate_string(oid_, node, 'oid')
            self.oid = oid_
        elif nodeName_ == 'source_reference':
            source_reference_ = child_.text
            source_reference_ = self.gds_validate_string(source_reference_, node, 'source_reference')
            self.source_reference = source_reference_
        elif nodeName_ == 'source_default':
            source_default_ = child_.text
            source_default_ = self.gds_validate_string(source_default_, node, 'source_default')
            self.source_default = source_default_
        elif nodeName_ == 'units':
            units_ = child_.text
            units_ = self.gds_validate_string(units_, node, 'units')
            self.units = units_
        elif nodeName_ == 'access_rights':
            access_rights_ = child_.text
            access_rights_ = self.gds_validate_string(access_rights_, node, 'access_rights')
            self.access_rights = access_rights_
        elif nodeName_ == 'is_internal':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'is_internal')
            self.is_internal = ival_
        elif nodeName_ == 'type':
            type_ = child_.text
            type_ = self.gds_validate_string(type_, node, 'type')
            self.type_ = type_
        elif nodeName_ == 'format':
            format_ = child_.text
            format_ = self.gds_validate_string(format_, node, 'format')
            self.format = format_
        elif nodeName_ == 'is_array':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'is_array')
            self.is_array = ival_
        elif nodeName_ == 'range_min':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'range_min')
            self.range_min = ival_
        elif nodeName_ == 'range_max':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'range_max')
            self.range_max = ival_
        elif nodeName_ == 'table_name':
            table_name_ = child_.text
            table_name_ = self.gds_validate_string(table_name_, node, 'table_name')
            self.table_name = table_name_
        elif nodeName_ == 'function':
            obj_ = function.factory()
            obj_.build(child_)
            self.set_function(obj_)
        elif nodeName_ == 'function_list':
            obj_ = function_list.factory()
            obj_.build(child_)
            self.set_function_list(obj_)
# end class config_element


class config_table(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, table_name=None, num_indices=None, description_user=None, description_internal=None, index1=None, index2=None, index3=None, oid=None, source_reference=None, is_internal=None):
        self.table_name = _cast(None, table_name)
        self.num_indices = _cast(int, num_indices)
        self.description_user = description_user
        self.description_internal = description_internal
        self.index1 = index1
        self.index2 = index2
        self.index3 = index3
        self.oid = oid
        self.source_reference = source_reference
        self.is_internal = is_internal
    def factory(*args_, **kwargs_):
        if config_table.subclass:
            return config_table.subclass(*args_, **kwargs_)
        else:
            return config_table(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_description_user(self): return self.description_user
    def set_description_user(self, description_user): self.description_user = description_user
    def get_description_internal(self): return self.description_internal
    def set_description_internal(self, description_internal): self.description_internal = description_internal
    def get_index1(self): return self.index1
    def set_index1(self, index1): self.index1 = index1
    def get_index2(self): return self.index2
    def set_index2(self, index2): self.index2 = index2
    def get_index3(self): return self.index3
    def set_index3(self, index3): self.index3 = index3
    def get_oid(self): return self.oid
    def set_oid(self, oid): self.oid = oid
    def get_source_reference(self): return self.source_reference
    def set_source_reference(self, source_reference): self.source_reference = source_reference
    def get_is_internal(self): return self.is_internal
    def set_is_internal(self, is_internal): self.is_internal = is_internal
    def get_table_name(self): return self.table_name
    def set_table_name(self, table_name): self.table_name = table_name
    def validate_notEmptyString(self, value):
        # Validate type notEmptyString, a restriction on xs:string.
        pass
    def get_num_indices(self): return self.num_indices
    def set_num_indices(self, num_indices): self.num_indices = num_indices
    def hasContent_(self):
        if (
            self.description_user is not None or
            self.description_internal is not None or
            self.index1 is not None or
            self.index2 is not None or
            self.index3 is not None or
            self.oid is not None or
            self.source_reference is not None or
            self.is_internal is not None
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='config_table', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='config_table')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='config_table'):
        if self.table_name is not None and 'table_name' not in already_processed:
            already_processed.add('table_name')
            outfile.write(' table_name=%s' % (quote_attrib(self.table_name), ))
        if self.num_indices is not None and 'num_indices' not in already_processed:
            already_processed.add('num_indices')
            outfile.write(' num_indices="%s"' % self.gds_format_integer(self.num_indices, input_name='num_indices'))
    def exportChildren(self, outfile, level, namespace_='', name_='config_table', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.description_user is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription_user>%s</%sdescription_user>%s' % (namespace_, self.gds_format_string(quote_xml(self.description_user).encode(ExternalEncoding), input_name='description_user'), namespace_, eol_))
        if self.description_internal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription_internal>%s</%sdescription_internal>%s' % (namespace_, self.gds_format_string(quote_xml(self.description_internal).encode(ExternalEncoding), input_name='description_internal'), namespace_, eol_))
        if self.index1 is not None:
            self.index1.export(outfile, level, namespace_, name_='index1', pretty_print=pretty_print)
        if self.index2 is not None:
            self.index2.export(outfile, level, namespace_, name_='index2', pretty_print=pretty_print)
        if self.index3 is not None:
            self.index3.export(outfile, level, namespace_, name_='index3', pretty_print=pretty_print)
        if self.oid is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%soid>%s</%soid>%s' % (namespace_, self.gds_format_string(quote_xml(self.oid).encode(ExternalEncoding), input_name='oid'), namespace_, eol_))
        if self.source_reference is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%ssource_reference>%s</%ssource_reference>%s' % (namespace_, self.gds_format_string(quote_xml(self.source_reference).encode(ExternalEncoding), input_name='source_reference'), namespace_, eol_))
        if self.is_internal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sis_internal>%s</%sis_internal>%s' % (namespace_, self.gds_format_boolean(self.is_internal, input_name='is_internal'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='config_table'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.table_name is not None and 'table_name' not in already_processed:
            already_processed.add('table_name')
            showIndent(outfile, level)
            outfile.write('table_name = "%s",\n' % (self.table_name,))
        if self.num_indices is not None and 'num_indices' not in already_processed:
            already_processed.add('num_indices')
            showIndent(outfile, level)
            outfile.write('num_indices = %d,\n' % (self.num_indices,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.description_user is not None:
            showIndent(outfile, level)
            outfile.write('description_user=%s,\n' % quote_python(self.description_user).encode(ExternalEncoding))
        if self.description_internal is not None:
            showIndent(outfile, level)
            outfile.write('description_internal=%s,\n' % quote_python(self.description_internal).encode(ExternalEncoding))
        if self.index1 is not None:
            showIndent(outfile, level)
            outfile.write('index1=model_.index1(\n')
            self.index1.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.index2 is not None:
            showIndent(outfile, level)
            outfile.write('index2=model_.index2(\n')
            self.index2.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.index3 is not None:
            showIndent(outfile, level)
            outfile.write('index3=model_.index3(\n')
            self.index3.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        if self.oid is not None:
            showIndent(outfile, level)
            outfile.write('oid=%s,\n' % quote_python(self.oid).encode(ExternalEncoding))
        if self.source_reference is not None:
            showIndent(outfile, level)
            outfile.write('source_reference=%s,\n' % quote_python(self.source_reference).encode(ExternalEncoding))
        if self.is_internal is not None:
            showIndent(outfile, level)
            outfile.write('is_internal=%s,\n' % self.is_internal)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('table_name', node)
        if value is not None and 'table_name' not in already_processed:
            already_processed.add('table_name')
            self.table_name = value
            self.validate_notEmptyString(self.table_name)    # validate type notEmptyString
        value = find_attr_value_('num_indices', node)
        if value is not None and 'num_indices' not in already_processed:
            already_processed.add('num_indices')
            try:
                self.num_indices = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
            if self.num_indices < 0:
                raise_parse_error(node, 'Invalid NonNegativeInteger')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'description_user':
            description_user_ = child_.text
            description_user_ = self.gds_validate_string(description_user_, node, 'description_user')
            self.description_user = description_user_
        elif nodeName_ == 'description_internal':
            description_internal_ = child_.text
            description_internal_ = self.gds_validate_string(description_internal_, node, 'description_internal')
            self.description_internal = description_internal_
        elif nodeName_ == 'index1':
            obj_ = index1.factory()
            obj_.build(child_)
            self.set_index1(obj_)
        elif nodeName_ == 'index2':
            obj_ = index2.factory()
            obj_.build(child_)
            self.set_index2(obj_)
        elif nodeName_ == 'index3':
            obj_ = index3.factory()
            obj_.build(child_)
            self.set_index3(obj_)
        elif nodeName_ == 'oid':
            oid_ = child_.text
            oid_ = self.gds_validate_string(oid_, node, 'oid')
            self.oid = oid_
        elif nodeName_ == 'source_reference':
            source_reference_ = child_.text
            source_reference_ = self.gds_validate_string(source_reference_, node, 'source_reference')
            self.source_reference = source_reference_
        elif nodeName_ == 'is_internal':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'is_internal')
            self.is_internal = ival_
# end class config_table


class metadata(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, subsystem_name=None, description=None, build_date_time=None, subsystem_id=None, variant=None, version=None, subsystem_alias=None, subsystem_layer=None, enum_def=None, struct_def=None, config_element=None, config_table=None, valueOf_=None, mixedclass_=None, content_=None):
        self.subsystem_name = _cast(None, subsystem_name)
        self.description = _cast(None, description)
        self.build_date_time = _cast(None, build_date_time)
        self.subsystem_id = _cast(None, subsystem_id)
        self.variant = _cast(int, variant)
        self.version = _cast(int, version)
        self.subsystem_alias = _cast(None, subsystem_alias)
        self.subsystem_layer = _cast(None, subsystem_layer)
        if enum_def is None:
            self.enum_def = []
        else:
            self.enum_def = enum_def
        if struct_def is None:
            self.struct_def = []
        else:
            self.struct_def = struct_def
        if config_element is None:
            self.config_element = []
        else:
            self.config_element = config_element
        if config_table is None:
            self.config_table = []
        else:
            self.config_table = config_table
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if metadata.subclass:
            return metadata.subclass(*args_, **kwargs_)
        else:
            return metadata(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_enum_def(self): return self.enum_def
    def set_enum_def(self, enum_def): self.enum_def = enum_def
    def add_enum_def(self, value): self.enum_def.append(value)
    def insert_enum_def(self, index, value): self.enum_def[index] = value
    def get_struct_def(self): return self.struct_def
    def set_struct_def(self, struct_def): self.struct_def = struct_def
    def add_struct_def(self, value): self.struct_def.append(value)
    def insert_struct_def(self, index, value): self.struct_def[index] = value
    def get_config_element(self): return self.config_element
    def set_config_element(self, config_element): self.config_element = config_element
    def add_config_element(self, value): self.config_element.append(value)
    def insert_config_element(self, index, value): self.config_element[index] = value
    def get_config_table(self): return self.config_table
    def set_config_table(self, config_table): self.config_table = config_table
    def add_config_table(self, value): self.config_table.append(value)
    def insert_config_table(self, index, value): self.config_table[index] = value
    def get_subsystem_name(self): return self.subsystem_name
    def set_subsystem_name(self, subsystem_name): self.subsystem_name = subsystem_name
    def validate_notEmptyString(self, value):
        # Validate type notEmptyString, a restriction on xs:string.
        pass
    def get_description(self): return self.description
    def set_description(self, description): self.description = description
    def get_build_date_time(self): return self.build_date_time
    def set_build_date_time(self, build_date_time): self.build_date_time = build_date_time
    def get_subsystem_id(self): return self.subsystem_id
    def set_subsystem_id(self, subsystem_id): self.subsystem_id = subsystem_id
    def get_variant(self): return self.variant
    def set_variant(self, variant): self.variant = variant
    def get_version(self): return self.version
    def set_version(self, version): self.version = version
    def get_subsystem_alias(self): return self.subsystem_alias
    def set_subsystem_alias(self, subsystem_alias): self.subsystem_alias = subsystem_alias
    def get_subsystem_layer(self): return self.subsystem_layer
    def set_subsystem_layer(self, subsystem_layer): self.subsystem_layer = subsystem_layer
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.enum_def or
            self.struct_def or
            self.config_element or
            self.config_table or
            self.valueOf_
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='metadata', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='metadata')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='metadata'):
        if self.subsystem_name is not None and 'subsystem_name' not in already_processed:
            already_processed.add('subsystem_name')
            outfile.write(' subsystem_name=%s' % (quote_attrib(self.subsystem_name), ))
        if self.description is not None and 'description' not in already_processed:
            already_processed.add('description')
            outfile.write(' description=%s' % (self.gds_format_string(quote_attrib(self.description).encode(ExternalEncoding), input_name='description'), ))
        if self.build_date_time is not None and 'build_date_time' not in already_processed:
            already_processed.add('build_date_time')
            outfile.write(' build_date_time=%s' % (self.gds_format_string(quote_attrib(self.build_date_time).encode(ExternalEncoding), input_name='build_date_time'), ))
        if self.subsystem_id is not None and 'subsystem_id' not in already_processed:
            already_processed.add('subsystem_id')
            outfile.write(' subsystem_id=%s' % (quote_attrib(self.subsystem_id), ))
        if self.variant is not None and 'variant' not in already_processed:
            already_processed.add('variant')
            outfile.write(' variant="%s"' % self.gds_format_integer(self.variant, input_name='variant'))
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            outfile.write(' version="%s"' % self.gds_format_integer(self.version, input_name='version'))
        if self.subsystem_alias is not None and 'subsystem_alias' not in already_processed:
            already_processed.add('subsystem_alias')
            outfile.write(' subsystem_alias=%s' % (self.gds_format_string(quote_attrib(self.subsystem_alias).encode(ExternalEncoding), input_name='subsystem_alias'), ))
        if self.subsystem_layer is not None and 'subsystem_layer' not in already_processed:
            already_processed.add('subsystem_layer')
            outfile.write(' subsystem_layer=%s' % (self.gds_format_string(quote_attrib(self.subsystem_layer).encode(ExternalEncoding), input_name='subsystem_layer'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='metadata', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='metadata'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.subsystem_name is not None and 'subsystem_name' not in already_processed:
            already_processed.add('subsystem_name')
            showIndent(outfile, level)
            outfile.write('subsystem_name = "%s",\n' % (self.subsystem_name,))
        if self.description is not None and 'description' not in already_processed:
            already_processed.add('description')
            showIndent(outfile, level)
            outfile.write('description = "%s",\n' % (self.description,))
        if self.build_date_time is not None and 'build_date_time' not in already_processed:
            already_processed.add('build_date_time')
            showIndent(outfile, level)
            outfile.write('build_date_time = "%s",\n' % (self.build_date_time,))
        if self.subsystem_id is not None and 'subsystem_id' not in already_processed:
            already_processed.add('subsystem_id')
            showIndent(outfile, level)
            outfile.write('subsystem_id = "%s",\n' % (self.subsystem_id,))
        if self.variant is not None and 'variant' not in already_processed:
            already_processed.add('variant')
            showIndent(outfile, level)
            outfile.write('variant = %d,\n' % (self.variant,))
        if self.version is not None and 'version' not in already_processed:
            already_processed.add('version')
            showIndent(outfile, level)
            outfile.write('version = %d,\n' % (self.version,))
        if self.subsystem_alias is not None and 'subsystem_alias' not in already_processed:
            already_processed.add('subsystem_alias')
            showIndent(outfile, level)
            outfile.write('subsystem_alias = "%s",\n' % (self.subsystem_alias,))
        if self.subsystem_layer is not None and 'subsystem_layer' not in already_processed:
            already_processed.add('subsystem_layer')
            showIndent(outfile, level)
            outfile.write('subsystem_layer = "%s",\n' % (self.subsystem_layer,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('subsystem_name', node)
        if value is not None and 'subsystem_name' not in already_processed:
            already_processed.add('subsystem_name')
            self.subsystem_name = value
            self.validate_notEmptyString(self.subsystem_name)    # validate type notEmptyString
        value = find_attr_value_('description', node)
        if value is not None and 'description' not in already_processed:
            already_processed.add('description')
            self.description = value
        value = find_attr_value_('build_date_time', node)
        if value is not None and 'build_date_time' not in already_processed:
            already_processed.add('build_date_time')
            self.build_date_time = value
        value = find_attr_value_('subsystem_id', node)
        if value is not None and 'subsystem_id' not in already_processed:
            already_processed.add('subsystem_id')
            self.subsystem_id = value
            self.validate_notEmptyString(self.subsystem_id)    # validate type notEmptyString
        value = find_attr_value_('variant', node)
        if value is not None and 'variant' not in already_processed:
            already_processed.add('variant')
            try:
                self.variant = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('version', node)
        if value is not None and 'version' not in already_processed:
            already_processed.add('version')
            try:
                self.version = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('subsystem_alias', node)
        if value is not None and 'subsystem_alias' not in already_processed:
            already_processed.add('subsystem_alias')
            self.subsystem_alias = value
        value = find_attr_value_('subsystem_layer', node)
        if value is not None and 'subsystem_layer' not in already_processed:
            already_processed.add('subsystem_layer')
            self.subsystem_layer = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'enum_def':
            obj_ = enum_def.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'enum_def', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_enum_def'):
              self.add_enum_def(obj_.value)
            elif hasattr(self, 'set_enum_def'):
              self.set_enum_def(obj_.value)
        elif nodeName_ == 'struct_def':
            obj_ = struct_def.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'struct_def', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_struct_def'):
              self.add_struct_def(obj_.value)
            elif hasattr(self, 'set_struct_def'):
              self.set_struct_def(obj_.value)
        elif nodeName_ == 'config_element':
            obj_ = config_element.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'config_element', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_config_element'):
              self.add_config_element(obj_.value)
            elif hasattr(self, 'set_config_element'):
              self.set_config_element(obj_.value)
        elif nodeName_ == 'config_table':
            obj_ = config_table.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'config_table', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_config_table'):
              self.add_config_table(obj_.value)
            elif hasattr(self, 'set_config_table'):
              self.set_config_table(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class metadata


class metadata_list(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, metadata=None, valueOf_=None, mixedclass_=None, content_=None):
        if metadata is None:
            self.metadata = []
        else:
            self.metadata = metadata
        self.valueOf_ = valueOf_
        if mixedclass_ is None:
            self.mixedclass_ = MixedContainer
        else:
            self.mixedclass_ = mixedclass_
        if content_ is None:
            self.content_ = []
        else:
            self.content_ = content_
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if metadata_list.subclass:
            return metadata_list.subclass(*args_, **kwargs_)
        else:
            return metadata_list(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_metadata(self): return self.metadata
    def set_metadata(self, metadata): self.metadata = metadata
    def add_metadata(self, value): self.metadata.append(value)
    def insert_metadata(self, index, value): self.metadata[index] = value
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.metadata or
            self.valueOf_
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='metadata_list', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='metadata_list')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='metadata_list'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='metadata_list', fromsubclass_=False, pretty_print=True):
        if not fromsubclass_:
            for item_ in self.content_:
                item_.export(outfile, level, item_.name, namespace_, pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='metadata_list'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('content_ = [\n')
        for item_ in self.content_:
            item_.exportLiteral(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('],\n')
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        if node.text is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', node.text)
            self.content_.append(obj_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'metadata':
            obj_ = metadata.factory()
            obj_.build(child_)
            obj_ = self.mixedclass_(MixedContainer.CategoryComplex,
                MixedContainer.TypeNone, 'metadata', obj_)
            self.content_.append(obj_)
            if hasattr(self, 'add_metadata'):
              self.add_metadata(obj_.value)
            elif hasattr(self, 'set_metadata'):
              self.set_metadata(obj_.value)
        if not fromsubclass_ and child_.tail is not None:
            obj_ = self.mixedclass_(MixedContainer.CategoryText,
                MixedContainer.TypeNone, '', child_.tail)
            self.content_.append(obj_)
# end class metadata_list


class structure_elementType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, bit_width=None, name=None, lsb_bit_position=None, label=None, description_user=None, description_internal=None, type_=None, format=None, range_min=None, range_max=None):
        self.bit_width = _cast(int, bit_width)
        self.name = _cast(None, name)
        self.lsb_bit_position = _cast(int, lsb_bit_position)
        self.label = label
        self.description_user = description_user
        self.description_internal = description_internal
        self.type_ = type_
        self.format = format
        self.range_min = range_min
        self.range_max = range_max
    def factory(*args_, **kwargs_):
        if structure_elementType.subclass:
            return structure_elementType.subclass(*args_, **kwargs_)
        else:
            return structure_elementType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_label(self): return self.label
    def set_label(self, label): self.label = label
    def get_description_user(self): return self.description_user
    def set_description_user(self, description_user): self.description_user = description_user
    def get_description_internal(self): return self.description_internal
    def set_description_internal(self, description_internal): self.description_internal = description_internal
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_format(self): return self.format
    def set_format(self, format): self.format = format
    def get_range_min(self): return self.range_min
    def set_range_min(self, range_min): self.range_min = range_min
    def get_range_max(self): return self.range_max
    def set_range_max(self, range_max): self.range_max = range_max
    def get_bit_width(self): return self.bit_width
    def set_bit_width(self, bit_width): self.bit_width = bit_width
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def validate_notEmptyString(self, value):
        # Validate type notEmptyString, a restriction on xs:string.
        pass
    def get_lsb_bit_position(self): return self.lsb_bit_position
    def set_lsb_bit_position(self, lsb_bit_position): self.lsb_bit_position = lsb_bit_position
    def hasContent_(self):
        if (
            self.label is not None or
            self.description_user is not None or
            self.description_internal is not None or
            self.type_ is not None or
            self.format is not None or
            self.range_min is not None or
            self.range_max is not None
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='structure_elementType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='structure_elementType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='structure_elementType'):
        if self.bit_width is not None and 'bit_width' not in already_processed:
            already_processed.add('bit_width')
            outfile.write(' bit_width="%s"' % self.gds_format_integer(self.bit_width, input_name='bit_width'))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (quote_attrib(self.name), ))
        if self.lsb_bit_position is not None and 'lsb_bit_position' not in already_processed:
            already_processed.add('lsb_bit_position')
            outfile.write(' lsb_bit_position="%s"' % self.gds_format_integer(self.lsb_bit_position, input_name='lsb_bit_position'))
    def exportChildren(self, outfile, level, namespace_='', name_='structure_elementType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.label is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%slabel>%s</%slabel>%s' % (namespace_, self.gds_format_string(quote_xml(self.label).encode(ExternalEncoding), input_name='label'), namespace_, eol_))
        if self.description_user is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription_user>%s</%sdescription_user>%s' % (namespace_, self.gds_format_string(quote_xml(self.description_user).encode(ExternalEncoding), input_name='description_user'), namespace_, eol_))
        if self.description_internal is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdescription_internal>%s</%sdescription_internal>%s' % (namespace_, self.gds_format_string(quote_xml(self.description_internal).encode(ExternalEncoding), input_name='description_internal'), namespace_, eol_))
        if self.type_ is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stype>%s</%stype>%s' % (namespace_, self.gds_format_string(quote_xml(self.type_).encode(ExternalEncoding), input_name='type'), namespace_, eol_))
        if self.format is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sformat>%s</%sformat>%s' % (namespace_, self.gds_format_string(quote_xml(self.format).encode(ExternalEncoding), input_name='format'), namespace_, eol_))
        if self.range_min is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srange_min>%s</%srange_min>%s' % (namespace_, self.gds_format_integer(self.range_min, input_name='range_min'), namespace_, eol_))
        if self.range_max is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srange_max>%s</%srange_max>%s' % (namespace_, self.gds_format_integer(self.range_max, input_name='range_max'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='structure_elementType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.bit_width is not None and 'bit_width' not in already_processed:
            already_processed.add('bit_width')
            showIndent(outfile, level)
            outfile.write('bit_width = %d,\n' % (self.bit_width,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
        if self.lsb_bit_position is not None and 'lsb_bit_position' not in already_processed:
            already_processed.add('lsb_bit_position')
            showIndent(outfile, level)
            outfile.write('lsb_bit_position = %d,\n' % (self.lsb_bit_position,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.label is not None:
            showIndent(outfile, level)
            outfile.write('label=%s,\n' % quote_python(self.label).encode(ExternalEncoding))
        if self.description_user is not None:
            showIndent(outfile, level)
            outfile.write('description_user=%s,\n' % quote_python(self.description_user).encode(ExternalEncoding))
        if self.description_internal is not None:
            showIndent(outfile, level)
            outfile.write('description_internal=%s,\n' % quote_python(self.description_internal).encode(ExternalEncoding))
        if self.type_ is not None:
            showIndent(outfile, level)
            outfile.write('type_=%s,\n' % quote_python(self.type_).encode(ExternalEncoding))
        if self.format is not None:
            showIndent(outfile, level)
            outfile.write('format=%s,\n' % quote_python(self.format).encode(ExternalEncoding))
        if self.range_min is not None:
            showIndent(outfile, level)
            outfile.write('range_min=%d,\n' % self.range_min)
        if self.range_max is not None:
            showIndent(outfile, level)
            outfile.write('range_max=%d,\n' % self.range_max)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('bit_width', node)
        if value is not None and 'bit_width' not in already_processed:
            already_processed.add('bit_width')
            try:
                self.bit_width = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
            self.validate_notEmptyString(self.name)    # validate type notEmptyString
        value = find_attr_value_('lsb_bit_position', node)
        if value is not None and 'lsb_bit_position' not in already_processed:
            already_processed.add('lsb_bit_position')
            try:
                self.lsb_bit_position = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'label':
            label_ = child_.text
            label_ = self.gds_validate_string(label_, node, 'label')
            self.label = label_
        elif nodeName_ == 'description_user':
            description_user_ = child_.text
            description_user_ = self.gds_validate_string(description_user_, node, 'description_user')
            self.description_user = description_user_
        elif nodeName_ == 'description_internal':
            description_internal_ = child_.text
            description_internal_ = self.gds_validate_string(description_internal_, node, 'description_internal')
            self.description_internal = description_internal_
        elif nodeName_ == 'type':
            type_ = child_.text
            type_ = self.gds_validate_string(type_, node, 'type')
            self.type_ = type_
        elif nodeName_ == 'format':
            format_ = child_.text
            format_ = self.gds_validate_string(format_, node, 'format')
            self.format = format_
        elif nodeName_ == 'range_min':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'range_min')
            self.range_min = ival_
        elif nodeName_ == 'range_max':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'range_max')
            self.range_max = ival_
# end class structure_elementType


class enum_entryType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, enum_description=None, enum_label=None, enum_value=None):
        self.enum_description = _cast(None, enum_description)
        self.enum_label = _cast(None, enum_label)
        self.enum_value = _cast(None, enum_value)
        pass
    def factory(*args_, **kwargs_):
        if enum_entryType.subclass:
            return enum_entryType.subclass(*args_, **kwargs_)
        else:
            return enum_entryType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_enum_description(self): return self.enum_description
    def set_enum_description(self, enum_description): self.enum_description = enum_description
    def validate_notEmptyString(self, value):
        # Validate type notEmptyString, a restriction on xs:string.
        pass
    def get_enum_label(self): return self.enum_label
    def set_enum_label(self, enum_label): self.enum_label = enum_label
    def get_enum_value(self): return self.enum_value
    def set_enum_value(self, enum_value): self.enum_value = enum_value
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='enum_entryType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='enum_entryType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='enum_entryType'):
        if self.enum_description is not None and 'enum_description' not in already_processed:
            already_processed.add('enum_description')
            outfile.write(' enum_description=%s' % (quote_attrib(self.enum_description), ))
        if self.enum_label is not None and 'enum_label' not in already_processed:
            already_processed.add('enum_label')
            outfile.write(' enum_label=%s' % (quote_attrib(self.enum_label), ))
        if self.enum_value is not None and 'enum_value' not in already_processed:
            already_processed.add('enum_value')
            outfile.write(' enum_value=%s' % (quote_attrib(self.enum_value), ))
    def exportChildren(self, outfile, level, namespace_='', name_='enum_entryType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='enum_entryType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.enum_description is not None and 'enum_description' not in already_processed:
            already_processed.add('enum_description')
            showIndent(outfile, level)
            outfile.write('enum_description = "%s",\n' % (self.enum_description,))
        if self.enum_label is not None and 'enum_label' not in already_processed:
            already_processed.add('enum_label')
            showIndent(outfile, level)
            outfile.write('enum_label = "%s",\n' % (self.enum_label,))
        if self.enum_value is not None and 'enum_value' not in already_processed:
            already_processed.add('enum_value')
            showIndent(outfile, level)
            outfile.write('enum_value = "%s",\n' % (self.enum_value,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('enum_description', node)
        if value is not None and 'enum_description' not in already_processed:
            already_processed.add('enum_description')
            self.enum_description = value
            self.validate_notEmptyString(self.enum_description)    # validate type notEmptyString
        value = find_attr_value_('enum_label', node)
        if value is not None and 'enum_label' not in already_processed:
            already_processed.add('enum_label')
            self.enum_label = value
            self.validate_notEmptyString(self.enum_label)    # validate type notEmptyString
        value = find_attr_value_('enum_value', node)
        if value is not None and 'enum_value' not in already_processed:
            already_processed.add('enum_value')
            self.enum_value = value
            self.validate_notEmptyString(self.enum_value)    # validate type notEmptyString
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class enum_entryType


GDSClassesMapping = {
    'enum_entry': enum_entryType,
    'structure_element': structure_elementType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    iprint(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'metadata_list'
        rootClass = metadata_list
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if False:
        # Manually disabled this section!
        gstrm.iout.write('<?xml version="1.0" ?>\n')
        rootObj.export(gstrm.iout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'metadata_list'
        rootClass = metadata_list
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    rootElement = rootObj.to_etree(None, name_=rootTag)
    content = etree_.tostring(rootElement, pretty_print=True,
        xml_declaration=True, encoding="utf-8")
    gstrm.iout.write(content)
    gstrm.iout.write('\n')
    return rootObj, rootElement


def parseString(inString):
    try:
        from StringIO import StringIO
    except ImportError:
        from io import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'metadata_list'
        rootClass = metadata_list
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    gstrm.iout.write('<?xml version="1.0" ?>\n')
    rootObj.export(gstrm.iout, 0, name_="metadata_list",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'metadata_list'
        rootClass = metadata_list
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    gstrm.iout.write('#from hydra_meta import *\n\n')
    gstrm.iout.write('from datetime import datetime as datetime_\n\n')
    gstrm.iout.write('import hydra_meta as model_\n\n')
    gstrm.iout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(gstrm.iout, 0, name_=rootTag)
    gstrm.iout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    iprint("hi")
    main()


__all__ = [
    "config_element",
    "config_table",
    "default",
    "default_list",
    "enum_def",
    "enum_entryType",
    "function",
    "function_list",
    "index1",
    "index2",
    "index3",
    "metadata",
    "metadata_list",
    "struct_def",
    "structure_elementType"
    ]
