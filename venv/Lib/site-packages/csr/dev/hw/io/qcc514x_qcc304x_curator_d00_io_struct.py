# -*- coding: utf-8 -*-
#------------------------------------------------------------------------------
# Automatically-generated memory-mapped registers IO file
#------------------------------------------------------------------------------

class c_enum(object):
   def __init__(self, parent, value, text, reg):
      self.parent = parent
      self.value  = value
      self.text   = text
      self.reg    = reg
class c_value(object):
   def __init__(self, parent, name, value, text):
      self.parent = parent
      self.name   = name
      self.value  = value
      self.text   = text
class c_bits(object):
   def __init__(self, parent, lsb, msb, mask, width, rw_flags, text):
      self.parent   = parent
      self.lsb      = lsb
      self.msb      = msb
      self.mask     = mask
      self.rw_flags = rw_flags
      self.width    = width
      self.text     = text
class c_reg(object):
   def __init__(self, addr, r, w, m, rw_flags, width, reset, local, ext_read, mod_name, group, text, locked_by, unlock_value, typedefd_io, safe_to_load, is_bank_ctrl, bank_ctrl_reg, constant):
      self.addr          = addr
      self.r             = r            # Readable
      self.w             = w            # Writeable
      self.m             = m            # Mixed register type
      self.rw_flags      = rw_flags     # RW flags
      self.width         = width
      self.local         = local
      self.ext_read      = ext_read
      self.mod_name      = mod_name
      self.text          = text
      self.group         = group
      self.reset         = reset
      self.locked_by     = locked_by
      self.unlock_value  = unlock_value
      self.safe_to_load  = safe_to_load
      self.typedefd_io   = typedefd_io
      self.is_bank_ctrl  = is_bank_ctrl
      self.bank_ctrl_reg = bank_ctrl_reg
      self.constant      = constant
class c_regarray(object):
   def __init__(self, addr, num_elements, element):
      self.addr = addr
      self.num_elements  = num_elements
      self.element = element
CURATOR_SUBSYSTEMS_ANC_CLK_ENABLES                                               = c_reg(0xf00c, 1, 1, 0, "", 7, 2, 0, 0, "", "", "", "", "", 1, 1, "", "", 0)
CURATOR_SUBSYSTEMS_ANC_CLK_ENABLES.CLK_TBUS                                      = c_bits(CURATOR_SUBSYSTEMS_ANC_CLK_ENABLES, 0, 0, 0x1, 1, "", "")
CURATOR_SUBSYSTEMS_ANC_CLK_ENABLES.CLK_CURATOR_UNSCALED                          = c_bits(CURATOR_SUBSYSTEMS_ANC_CLK_ENABLES, 1, 1, 0x2, 1, "", "")
CURATOR_SUBSYSTEMS_ANC_CLK_ENABLES.CLK_AUDIO_KCODEC                              = c_bits(CURATOR_SUBSYSTEMS_ANC_CLK_ENABLES, 2, 2, 0x4, 1, "", "")
CURATOR_SUBSYSTEMS_ANC_CLK_ENABLES.CLK_CURATOR_SMPS                              = c_bits(CURATOR_SUBSYSTEMS_ANC_CLK_ENABLES, 3, 3, 0x8, 1, "", "")
CURATOR_SUBSYSTEMS_ANC_CLK_ENABLES.CLK_LED_CTRL                                  = c_bits(CURATOR_SUBSYSTEMS_ANC_CLK_ENABLES, 4, 4, 0x10, 1, "", "")
CURATOR_SUBSYSTEMS_ANC_CLK_ENABLES.CLK_AUDIO_DDS                                 = c_bits(CURATOR_SUBSYSTEMS_ANC_CLK_ENABLES, 5, 5, 0x20, 1, "", "")
CURATOR_SUBSYSTEMS_CLK_SOURCES                                                   = c_reg(0xf00a, 1, 1, 0, "", 4, 0, 1, 0, "", "", "", "", "", 1, 1, "", "", 0)
CURATOR_SUBSYSTEMS_CLK_SOURCES.CURATOR_APPS_CLK_SOURCE                           = c_bits(CURATOR_SUBSYSTEMS_CLK_SOURCES, 0, 0, 0x1, 1, "", "")
CURATOR_SUBSYSTEMS_CLK_SOURCES.CURATOR_LED_CTRL_CLK_SOURCE                       = c_bits(CURATOR_SUBSYSTEMS_CLK_SOURCES, 1, 2, 0x6, 2, "", "")
CURATOR_SUBSYSTEMS_CLK_SOURCES.CURATOR_AUDIO_DDS_CLK_SOURCE                      = c_bits(CURATOR_SUBSYSTEMS_CLK_SOURCES, 3, 3, 0x8, 1, "", "")
CURATOR_SUBSYSTEMS_CLK_SOURCES.CURATOR_APPS_CLK_SOURCE_SCALED                    = c_enum(CURATOR_SUBSYSTEMS_CLK_SOURCES, 0, "", "")
CURATOR_SUBSYSTEMS_CLK_SOURCES.CURATOR_APPS_CLK_SOURCE_ADPLL                     = c_enum(CURATOR_SUBSYSTEMS_CLK_SOURCES, 1, "", "")
CURATOR_SUBSYSTEMS_CLK_SOURCES.CURATOR_LED_CTRL_CLK_SOURCE_SOSC                  = c_enum(CURATOR_SUBSYSTEMS_CLK_SOURCES, 0, "", "")
CURATOR_SUBSYSTEMS_CLK_SOURCES.CURATOR_LED_CTRL_CLK_SOURCE_FOSC                  = c_enum(CURATOR_SUBSYSTEMS_CLK_SOURCES, 1, "", "")
CURATOR_SUBSYSTEMS_CLK_SOURCES.CURATOR_LED_CTRL_CLK_SOURCE_XTAL                  = c_enum(CURATOR_SUBSYSTEMS_CLK_SOURCES, 2, "", "")
CURATOR_SUBSYSTEMS_CLK_SOURCES.CURATOR_LED_CTRL_CLK_SOURCE_RESERVED              = c_enum(CURATOR_SUBSYSTEMS_CLK_SOURCES, 3, "", "")
CURATOR_SUBSYSTEMS_CLK_SOURCES.CURATOR_AUDIO_DDS_CLK_SOURCE_XTAL                 = c_enum(CURATOR_SUBSYSTEMS_CLK_SOURCES, 0, "", "")
CURATOR_SUBSYSTEMS_CLK_SOURCES.CURATOR_AUDIO_DDS_CLK_SOURCE_ADPLL                = c_enum(CURATOR_SUBSYSTEMS_CLK_SOURCES, 1, "", "")
CURATOR_SUBSYSTEMS_CORE_CLK_ENABLES                                              = c_reg(0xf00b, 1, 1, 0, "", 8, 2, 0, 0, "", "", "", "", "", 1, 1, "", "", 0)
CURATOR_SUBSYSTEMS_CORE_CLK_ENABLES.CURATOR_SUBSYS_CORE_CLK_ENABLES_RESERVED1    = c_bits(CURATOR_SUBSYSTEMS_CORE_CLK_ENABLES, 0, 0, 0x1, 1, "", "")
CURATOR_SUBSYSTEMS_CORE_CLK_ENABLES.CURATOR_SUBSYS_CORE_CLK_ENABLES_HOST         = c_bits(CURATOR_SUBSYSTEMS_CORE_CLK_ENABLES, 1, 1, 0x2, 1, "", "")
CURATOR_SUBSYSTEMS_CORE_CLK_ENABLES.CURATOR_SUBSYS_CORE_CLK_ENABLES_BT           = c_bits(CURATOR_SUBSYSTEMS_CORE_CLK_ENABLES, 2, 2, 0x4, 1, "", "")
CURATOR_SUBSYSTEMS_CORE_CLK_ENABLES.CURATOR_SUBSYS_CORE_CLK_ENABLES_AUDIO        = c_bits(CURATOR_SUBSYSTEMS_CORE_CLK_ENABLES, 3, 3, 0x8, 1, "", "")
CURATOR_SUBSYSTEMS_CORE_CLK_ENABLES.CURATOR_SUBSYS_CORE_CLK_ENABLES_APPS         = c_bits(CURATOR_SUBSYSTEMS_CORE_CLK_ENABLES, 4, 4, 0x10, 1, "", "")
CURATOR_SUBSYSTEMS_CORE_CLK_ENABLES.CURATOR_SUBSYS_CORE_CLK_ENABLES_RESERVED2    = c_bits(CURATOR_SUBSYSTEMS_CORE_CLK_ENABLES, 5, 5, 0x20, 1, "", "")
CURATOR_SUBSYSTEMS_CORE_CLK_ENABLES.CURATOR_SUBSYS_CORE_CLK_ENABLES_RESERVED3    = c_bits(CURATOR_SUBSYSTEMS_CORE_CLK_ENABLES, 6, 6, 0x40, 1, "", "")
CURATOR_SUBSYSTEMS_CORE_CLK_ENABLES.CURATOR_SUBSYS_CORE_CLK_ENABLES_AUDIO_DIV    = c_bits(CURATOR_SUBSYSTEMS_CORE_CLK_ENABLES, 7, 7, 0x80, 1, "", "")
CURATOR_SUBSYSTEMS_RUN_EN                                                        = c_reg(0xf021, 1, 1, 0, "", 6, 0, 1, 0, "", "", "", "", "", 1, 1, "", "", 0)
CURATOR_SUBSYSTEMS_RUN_EN.CURATOR_SYS__SYSTEM_BUS_HOST_SYS                       = c_bits(CURATOR_SUBSYSTEMS_RUN_EN, 1, 1, 0x2, 1, "", "")
CURATOR_SUBSYSTEMS_RUN_EN.CURATOR_SYS__SYSTEM_BUS_BT_SYS                         = c_bits(CURATOR_SUBSYSTEMS_RUN_EN, 2, 2, 0x4, 1, "", "")
CURATOR_SUBSYSTEMS_RUN_EN.CURATOR_SYS__SYSTEM_BUS_APPS_SYS                       = c_bits(CURATOR_SUBSYSTEMS_RUN_EN, 4, 4, 0x10, 1, "", "")
CURATOR_SUBSYSTEMS_RUN_EN.CURATOR_SYS__SYSTEM_BUS_CURATOR                        = c_bits(CURATOR_SUBSYSTEMS_RUN_EN, 0, 0, 0x1, 1, "", "")
CURATOR_SUBSYSTEMS_RUN_EN.CURATOR_SYS__SYSTEM_BUS_PIO_CTRL_SYS                   = c_bits(CURATOR_SUBSYSTEMS_RUN_EN, 5, 5, 0x20, 1, "", "")
CURATOR_SUBSYSTEMS_RUN_EN.CURATOR_SYS__SYSTEM_BUS_AUDIO_SYS                      = c_bits(CURATOR_SUBSYSTEMS_RUN_EN, 3, 3, 0x8, 1, "", "")
CURATOR_SUBSYSTEMS_RUN_EN.CURATOR_SYS__SYSTEM_BUS_NUM_SUBSYSTEMS                 = c_enum(CURATOR_SUBSYSTEMS_RUN_EN, 6, "", "")
CURATOR_SUBSYSTEMS_RUN_EN.CURATOR_SYS__SYSTEM_BUS_RANGE_LSB                      = c_enum(CURATOR_SUBSYSTEMS_RUN_EN, 0, "", "")
CURATOR_SUBSYSTEMS_RUN_EN.CURATOR_SYS__SYSTEM_BUS_RANGE_MSB                      = c_enum(CURATOR_SUBSYSTEMS_RUN_EN, 5, "", "")
CURATOR_SUBSYSTEMS_UP                                                            = c_reg(0xf019, 1, 0, 0, "", 6, 0, 0, 0, "", "", "", "", "", 1, 1, "", "", 0)
CURATOR_SUBSYSTEMS_UP.CURATOR_SYS__SYSTEM_BUS_HOST_SYS                           = c_bits(CURATOR_SUBSYSTEMS_UP, 1, 1, 0x2, 1, "", "")
CURATOR_SUBSYSTEMS_UP.CURATOR_SYS__SYSTEM_BUS_BT_SYS                             = c_bits(CURATOR_SUBSYSTEMS_UP, 2, 2, 0x4, 1, "", "")
CURATOR_SUBSYSTEMS_UP.CURATOR_SYS__SYSTEM_BUS_APPS_SYS                           = c_bits(CURATOR_SUBSYSTEMS_UP, 4, 4, 0x10, 1, "", "")
CURATOR_SUBSYSTEMS_UP.CURATOR_SYS__SYSTEM_BUS_CURATOR                            = c_bits(CURATOR_SUBSYSTEMS_UP, 0, 0, 0x1, 1, "", "")
CURATOR_SUBSYSTEMS_UP.CURATOR_SYS__SYSTEM_BUS_PIO_CTRL_SYS                       = c_bits(CURATOR_SUBSYSTEMS_UP, 5, 5, 0x20, 1, "", "")
CURATOR_SUBSYSTEMS_UP.CURATOR_SYS__SYSTEM_BUS_AUDIO_SYS                          = c_bits(CURATOR_SUBSYSTEMS_UP, 3, 3, 0x8, 1, "", "")
CURATOR_SUBSYSTEMS_UP.CURATOR_SYS__SYSTEM_BUS_NUM_SUBSYSTEMS                     = c_enum(CURATOR_SUBSYSTEMS_UP, 6, "", "")
CURATOR_SUBSYSTEMS_UP.CURATOR_SYS__SYSTEM_BUS_RANGE_LSB                          = c_enum(CURATOR_SUBSYSTEMS_UP, 0, "", "")
CURATOR_SUBSYSTEMS_UP.CURATOR_SYS__SYSTEM_BUS_RANGE_MSB                          = c_enum(CURATOR_SUBSYSTEMS_UP, 5, "", "")
CURATOR_SUBSYSTEMS_POWERED                                                       = c_reg(0xf01f, 1, 1, 0, "", 6, 3, 0, 0, "", "", "", "", "", 1, 1, "", "", 0)
CURATOR_SUBSYSTEMS_POWERED.CURATOR_SYS_POR__SYSTEM_BUS_HOST_SYS                  = c_bits(CURATOR_SUBSYSTEMS_POWERED, 1, 1, 0x2, 1, "", "")
CURATOR_SUBSYSTEMS_POWERED.CURATOR_SYS_POR__SYSTEM_BUS_BT_SYS                    = c_bits(CURATOR_SUBSYSTEMS_POWERED, 2, 2, 0x4, 1, "", "")
CURATOR_SUBSYSTEMS_POWERED.CURATOR_SYS_POR__SYSTEM_BUS_APPS_SYS                  = c_bits(CURATOR_SUBSYSTEMS_POWERED, 4, 4, 0x10, 1, "", "")
CURATOR_SUBSYSTEMS_POWERED.CURATOR_SYS_POR__SYSTEM_BUS_CURATOR                   = c_bits(CURATOR_SUBSYSTEMS_POWERED, 0, 0, 0x1, 1, "", "")
CURATOR_SUBSYSTEMS_POWERED.CURATOR_SYS_POR__SYSTEM_BUS_PIO_CTRL_SYS              = c_bits(CURATOR_SUBSYSTEMS_POWERED, 5, 5, 0x20, 1, "", "")
CURATOR_SUBSYSTEMS_POWERED.CURATOR_SYS_POR__SYSTEM_BUS_AUDIO_SYS                 = c_bits(CURATOR_SUBSYSTEMS_POWERED, 3, 3, 0x8, 1, "", "")
CURATOR_SUBSYSTEMS_POWERED.CURATOR_SYS_POR__SYSTEM_BUS_NUM_SUBSYSTEMS            = c_enum(CURATOR_SUBSYSTEMS_POWERED, 6, "", "")
CURATOR_SUBSYSTEMS_POWERED.CURATOR_SYS_POR__SYSTEM_BUS_RANGE_LSB                 = c_enum(CURATOR_SUBSYSTEMS_POWERED, 0, "", "")
CURATOR_SUBSYSTEMS_POWERED.CURATOR_SYS_POR__SYSTEM_BUS_RANGE_MSB                 = c_enum(CURATOR_SUBSYSTEMS_POWERED, 5, "", "")
DBG_EMU_CMD                                                                      = c_reg(0xf81d, 1, 1, 0, "", 8, 0, 1, 0, "", "", "", "", "", 0, 0, "", "", 0)
DBG_EMU_CMD.DBG_EMU_CMD_XAP_STEP                                                 = c_bits(DBG_EMU_CMD, 0, 0, 0x1, 1, "", "")
DBG_EMU_CMD.DBG_EMU_CMD_XAP_RUN_B                                                = c_bits(DBG_EMU_CMD, 1, 1, 0x2, 1, "", "")
DBG_EMU_CMD.DBG_EMU_CMD_XAP_BRK                                                  = c_bits(DBG_EMU_CMD, 2, 2, 0x4, 1, "", "")
DBG_EMU_CMD.DBG_EMU_CMD_XAP_WAKEUP                                               = c_bits(DBG_EMU_CMD, 3, 3, 0x8, 1, "", "")
DBG_EMU_CMD.DBG_EMU_CMD_BREAK_ALL                                                = c_bits(DBG_EMU_CMD, 4, 4, 0x10, 1, "", "")
DBG_EMU_CMD.DBG_EMU_CMD_UNUSED_5                                                 = c_bits(DBG_EMU_CMD, 5, 5, 0x20, 1, "", "")
DBG_EMU_CMD.DBG_EMU_CMD_UNUSED_6                                                 = c_bits(DBG_EMU_CMD, 6, 6, 0x40, 1, "", "")
DBG_EMU_CMD.DBG_EMU_CMD_UNUSED_7                                                 = c_bits(DBG_EMU_CMD, 7, 7, 0x80, 1, "", "")
HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN                                            = c_reg(0xf717, 1, 1, 0, "", 16, 1, 0, 0, "", "", "", "", "", 0, 1, "", "", 0)
HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN.HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN      = c_bits(HOST_SYS_REG_ACCESS_SUBSYS_IN_ADDR_EN, 0, 15, 0xffff, 16, "", "")
WATCHDOG_STOP_CONFIG                                                             = c_reg(0xf5fc, 1, 1, 0, "", 3, 6, 0, 0, "", "", "", "", "", 1, 1, "", "", 0)
WATCHDOG_STOP_CONFIG.WATCHDOG_STOP_CONFIG_JANITOR                                = c_bits(WATCHDOG_STOP_CONFIG, 0, 0, 0x1, 1, "", "")
WATCHDOG_STOP_CONFIG.WATCHDOG_STOP_CONFIG_CURATOR                                = c_bits(WATCHDOG_STOP_CONFIG, 1, 1, 0x2, 1, "", "")
WATCHDOG_STOP_CONFIG.WATCHDOG_STOP_CONFIG_SUSPEND_ON_CURATOR_STOP                = c_bits(WATCHDOG_STOP_CONFIG, 2, 2, 0x4, 1, "", "")
MMU_HOST_SUBSYSTEM_BLOCK_SELECT                                                  = c_reg(0xf8d9, 1, 1, 0, "", 4, 0, 0, 0, "", "", "", "", "", 0, 1, "", "", 0)
MMU_HOST_SUBSYSTEM_BLOCK_SELECT.MMU_HOST_SUBSYSTEM_BLOCK_SELECT                  = c_bits(MMU_HOST_SUBSYSTEM_BLOCK_SELECT, 0, 3, 0xf, 4, "", "")
MMU_PROC_GW1_CONFIG                                                              = c_reg(0x65, 1, 1, 0, "", 32, 0, 0, 0, "", "", "", "", "", 0, 1, "", "", 0)
MMU_PROC_GW1_CONFIG.MMU_GW_CONFIG_BANK_SELECT_LOW                                = c_bits(MMU_PROC_GW1_CONFIG, 0, 15, 0xffff, 16, "", "")
MMU_PROC_GW1_CONFIG.MMU_GW_CONFIG_BANK_SELECT_HIGH                               = c_bits(MMU_PROC_GW1_CONFIG, 16, 20, 0x1f0000, 5, "", "")
MMU_PROC_GW1_CONFIG.MMU_GW_CONFIG_BLOCK_ID                                       = c_bits(MMU_PROC_GW1_CONFIG, 21, 24, 0x1e00000, 4, "", "")
MMU_PROC_GW1_CONFIG.MMU_GW_CONFIG_SUBSYSTEM_ID                                   = c_bits(MMU_PROC_GW1_CONFIG, 25, 28, 0x1e000000, 4, "", "")
MMU_PROC_GW1_CONFIG.MMU_GW_CONFIG_MAPPING                                        = c_bits(MMU_PROC_GW1_CONFIG, 29, 31, 0xe0000000, 3, "", "")
MMU_PROC_GW1_CONFIG.MMU_GW_CONFIG_BANK_SELECT_SHIFT                              = c_enum(MMU_PROC_GW1_CONFIG, 11, "", "")
MMU_PROC_GW2_CONFIG                                                              = c_reg(0x67, 1, 1, 0, "", 32, 0, 0, 0, "", "", "", "", "", 0, 1, "", "", 0)
MMU_PROC_GW2_CONFIG.MMU_GW_CONFIG_BANK_SELECT_LOW                                = c_bits(MMU_PROC_GW2_CONFIG, 0, 15, 0xffff, 16, "", "")
MMU_PROC_GW2_CONFIG.MMU_GW_CONFIG_BANK_SELECT_HIGH                               = c_bits(MMU_PROC_GW2_CONFIG, 16, 20, 0x1f0000, 5, "", "")
MMU_PROC_GW2_CONFIG.MMU_GW_CONFIG_BLOCK_ID                                       = c_bits(MMU_PROC_GW2_CONFIG, 21, 24, 0x1e00000, 4, "", "")
MMU_PROC_GW2_CONFIG.MMU_GW_CONFIG_SUBSYSTEM_ID                                   = c_bits(MMU_PROC_GW2_CONFIG, 25, 28, 0x1e000000, 4, "", "")
MMU_PROC_GW2_CONFIG.MMU_GW_CONFIG_MAPPING                                        = c_bits(MMU_PROC_GW2_CONFIG, 29, 31, 0xe0000000, 3, "", "")
MMU_PROC_GW2_CONFIG.MMU_GW_CONFIG_BANK_SELECT_SHIFT                              = c_enum(MMU_PROC_GW2_CONFIG, 11, "", "")
MMU_PROC_GW3_CONFIG                                                              = c_reg(0x69, 1, 1, 0, "", 32, 0, 0, 0, "", "", "", "", "", 0, 1, "", "", 0)
MMU_PROC_GW3_CONFIG.MMU_GW_CONFIG_BANK_SELECT_LOW                                = c_bits(MMU_PROC_GW3_CONFIG, 0, 15, 0xffff, 16, "", "")
MMU_PROC_GW3_CONFIG.MMU_GW_CONFIG_BANK_SELECT_HIGH                               = c_bits(MMU_PROC_GW3_CONFIG, 16, 20, 0x1f0000, 5, "", "")
MMU_PROC_GW3_CONFIG.MMU_GW_CONFIG_BLOCK_ID                                       = c_bits(MMU_PROC_GW3_CONFIG, 21, 24, 0x1e00000, 4, "", "")
MMU_PROC_GW3_CONFIG.MMU_GW_CONFIG_SUBSYSTEM_ID                                   = c_bits(MMU_PROC_GW3_CONFIG, 25, 28, 0x1e000000, 4, "", "")
MMU_PROC_GW3_CONFIG.MMU_GW_CONFIG_MAPPING                                        = c_bits(MMU_PROC_GW3_CONFIG, 29, 31, 0xe0000000, 3, "", "")
MMU_PROC_GW3_CONFIG.MMU_GW_CONFIG_BANK_SELECT_SHIFT                              = c_enum(MMU_PROC_GW3_CONFIG, 11, "", "")
MMU_REG_ACCESS_TIMEOUT_VALUE                                                     = c_reg(0xf8b5, 1, 1, 0, "", 16, 2989, 0, 0, "", "", "", "", "", 0, 1, "", "", 0)
MMU_REG_ACCESS_TIMEOUT_VALUE.MMU_REG_ACCESS_TIMEOUT_VALUE                        = c_bits(MMU_REG_ACCESS_TIMEOUT_VALUE, 0, 15, 0xffff, 16, "", "")
MMU_SPI_GW1_CONFIG                                                               = c_reg(0xf955, 1, 1, 0, "", 32, 0, 0, 0, "", "", "", "", "", 0, 1, "", "", 0)
MMU_SPI_GW1_CONFIG.MMU_GW_CONFIG_BANK_SELECT_LOW                                 = c_bits(MMU_SPI_GW1_CONFIG, 0, 15, 0xffff, 16, "", "")
MMU_SPI_GW1_CONFIG.MMU_GW_CONFIG_BANK_SELECT_HIGH                                = c_bits(MMU_SPI_GW1_CONFIG, 16, 20, 0x1f0000, 5, "", "")
MMU_SPI_GW1_CONFIG.MMU_GW_CONFIG_BLOCK_ID                                        = c_bits(MMU_SPI_GW1_CONFIG, 21, 24, 0x1e00000, 4, "", "")
MMU_SPI_GW1_CONFIG.MMU_GW_CONFIG_SUBSYSTEM_ID                                    = c_bits(MMU_SPI_GW1_CONFIG, 25, 28, 0x1e000000, 4, "", "")
MMU_SPI_GW1_CONFIG.MMU_GW_CONFIG_MAPPING                                         = c_bits(MMU_SPI_GW1_CONFIG, 29, 31, 0xe0000000, 3, "", "")
MMU_SPI_GW1_CONFIG.MMU_GW_CONFIG_BANK_SELECT_SHIFT                               = c_enum(MMU_SPI_GW1_CONFIG, 11, "", "")
MMU_SPI_GW2_CONFIG                                                               = c_reg(0xf957, 1, 1, 0, "", 32, 0, 0, 0, "", "", "", "", "", 0, 1, "", "", 0)
MMU_SPI_GW2_CONFIG.MMU_GW_CONFIG_BANK_SELECT_LOW                                 = c_bits(MMU_SPI_GW2_CONFIG, 0, 15, 0xffff, 16, "", "")
MMU_SPI_GW2_CONFIG.MMU_GW_CONFIG_BANK_SELECT_HIGH                                = c_bits(MMU_SPI_GW2_CONFIG, 16, 20, 0x1f0000, 5, "", "")
MMU_SPI_GW2_CONFIG.MMU_GW_CONFIG_BLOCK_ID                                        = c_bits(MMU_SPI_GW2_CONFIG, 21, 24, 0x1e00000, 4, "", "")
MMU_SPI_GW2_CONFIG.MMU_GW_CONFIG_SUBSYSTEM_ID                                    = c_bits(MMU_SPI_GW2_CONFIG, 25, 28, 0x1e000000, 4, "", "")
MMU_SPI_GW2_CONFIG.MMU_GW_CONFIG_MAPPING                                         = c_bits(MMU_SPI_GW2_CONFIG, 29, 31, 0xe0000000, 3, "", "")
MMU_SPI_GW2_CONFIG.MMU_GW_CONFIG_BANK_SELECT_SHIFT                               = c_enum(MMU_SPI_GW2_CONFIG, 11, "", "")
MMU_SPI_GW3_CONFIG                                                               = c_reg(0xf959, 1, 1, 0, "", 32, 0, 0, 0, "", "", "", "", "", 0, 1, "", "", 0)
MMU_SPI_GW3_CONFIG.MMU_GW_CONFIG_BANK_SELECT_LOW                                 = c_bits(MMU_SPI_GW3_CONFIG, 0, 15, 0xffff, 16, "", "")
MMU_SPI_GW3_CONFIG.MMU_GW_CONFIG_BANK_SELECT_HIGH                                = c_bits(MMU_SPI_GW3_CONFIG, 16, 20, 0x1f0000, 5, "", "")
MMU_SPI_GW3_CONFIG.MMU_GW_CONFIG_BLOCK_ID                                        = c_bits(MMU_SPI_GW3_CONFIG, 21, 24, 0x1e00000, 4, "", "")
MMU_SPI_GW3_CONFIG.MMU_GW_CONFIG_SUBSYSTEM_ID                                    = c_bits(MMU_SPI_GW3_CONFIG, 25, 28, 0x1e000000, 4, "", "")
MMU_SPI_GW3_CONFIG.MMU_GW_CONFIG_MAPPING                                         = c_bits(MMU_SPI_GW3_CONFIG, 29, 31, 0xe0000000, 3, "", "")
MMU_SPI_GW3_CONFIG.MMU_GW_CONFIG_BANK_SELECT_SHIFT                               = c_enum(MMU_SPI_GW3_CONFIG, 11, "", "")
MMU_GW_CONFIG_BANK_SELECT_SHIFT                                                  = c_enum(None, 11, "", "")
MMU_GW_CONFIG_BANK_SELECT_LOW                                                    = c_enum(None, 0, "", "")
MMU_GW_CONFIG_BANK_SELECT_HIGH                                                   = c_enum(None, 16, "", "")
MMU_GW_CONFIG_BLOCK_ID                                                           = c_enum(None, 21, "", "")
MMU_GW_CONFIG_SUBSYSTEM_ID                                                       = c_enum(None, 25, "", "")
MMU_GW_CONFIG_MAPPING                                                            = c_enum(None, 29, "", "")
MMU_GW_CONFIG_IO_LOG                                                             = c_enum(None, 0, "", "")
MMU_GW_CONFIG_PROGRAM_MEMORY_EXT                                                 = c_enum(None, 1, "", "")
MMU_GW_CONFIG_PROGRAM_MEMORY_INT_RAM                                             = c_enum(None, 2, "", "")
MMU_GW_CONFIG_REMOTE_SUBSYSTEM                                                   = c_enum(None, 3, "", "")
MMU_GW_CONFIG_JANITOR                                                            = c_enum(None, 4, "", "")
NV_MEM_ADDR_MAP_CFG                                                              = c_reg(0xfb40, 1, 1, 0, "", 5, 0, 1, 0, "", "", "", "", "", 0, 0, "", "", 0)
NV_MEM_ADDR_MAP_CFG.NV_MEM_ADDR_MAP_CFG_ORDER                                    = c_bits(NV_MEM_ADDR_MAP_CFG, 0, 3, 0xf, 4, "", "")
NV_MEM_ADDR_MAP_CFG.NV_MEM_ADDR_MAP_CFG_LPC_DETECT_OVERRIDE                      = c_bits(NV_MEM_ADDR_MAP_CFG, 4, 4, 0x10, 1, "", "")
NV_MEM_ADDR_MAP_CFG_STATUS                                                       = c_reg(0xfb41, 1, 0, 0, "", 7, 0, 0, 0, "", "", "", "", "", 0, 1, "", "", 0)
NV_MEM_ADDR_MAP_CFG_STATUS.NV_MEM_ADDR_MAP_CFG_STATUS_ORDER                      = c_bits(NV_MEM_ADDR_MAP_CFG_STATUS, 0, 3, 0xf, 4, "", "")
NV_MEM_ADDR_MAP_CFG_STATUS.NV_MEM_ADDR_MAP_CFG_MEM_MAP_CFG_DONE                  = c_bits(NV_MEM_ADDR_MAP_CFG_STATUS, 4, 4, 0x10, 1, "", "")
NV_MEM_ADDR_MAP_CFG_STATUS.NV_MEM_ADDR_MAP_CFG_LPC_DETECT_VALID                  = c_bits(NV_MEM_ADDR_MAP_CFG_STATUS, 5, 5, 0x20, 1, "", "")
NV_MEM_ADDR_MAP_CFG_STATUS.NV_MEM_ADDR_MAP_CFG_LPC_DETECT                        = c_bits(NV_MEM_ADDR_MAP_CFG_STATUS, 6, 6, 0x40, 1, "", "")
NV_MEM_ADDR_MAP_CFG_HIGH_SQIF_LOW_ROM                                            = c_enum(None, 4, "", "")
NV_MEM_ADDR_MAP_CFG_HIGH_ROM_LOW_SQIF                                            = c_enum(None, 1, "", "")
NV_MEM_ADDR_MAP_CFG_HIGH_SQIF_LOW_SQIF                                           = c_enum(None, 5, "", "")
NV_MEM_ADDR_MAP_CFG_HIGH_ROM_LOW_ROM                                             = c_enum(None, 0, "", "")
NV_MEM_ADDR_MAP_CFG_HIGH_MASK                                                    = c_enum(None, 12, "", "")
NV_MEM_ADDR_MAP_CFG_LOW_MASK                                                     = c_enum(None, 3, "", "")
NV_MEM_ADDR_MAP_CFG_HIGH_ROM_MASK                                                = c_enum(None, 0, "", "")
NV_MEM_ADDR_MAP_CFG_HIGH_SQIF_MASK                                               = c_enum(None, 4, "", "")
NV_MEM_ADDR_MAP_CFG_HIGH_RAM_MASK                                                = c_enum(None, 8, "", "")
NV_MEM_ADDR_MAP_CFG_LOW_ROM_MASK                                                 = c_enum(None, 0, "", "")
NV_MEM_ADDR_MAP_CFG_LOW_SQIF_MASK                                                = c_enum(None, 1, "", "")
NV_MEM_ADDR_MAP_CFG_LOW_RAM_MASK                                                 = c_enum(None, 2, "", "")
NV_MEM_ADDR_MAP_CFG_ROM_SEL                                                      = c_enum(None, 0, "", "")
NV_MEM_ADDR_MAP_CFG_SQIF_SEL                                                     = c_enum(None, 1, "", "")
NV_MEM_ADDR_MAP_CFG_RAM_SEL                                                      = c_enum(None, 2, "", "")
NV_MEM_ADDR_MAP_CFG_NOTHING_SEL                                                  = c_enum(None, 3, "", "")
NV_MEM_ADDR_MAP_CFG_NO_ROM_LPC_RAM                                               = c_enum(None, 15, "", "")
USB2_ENDPOINT_SELECT                                                             = c_reg(0xf790, 1, 1, 0, "", 6, 0, 0, 0, "", "", "", "", "", 0, 1, "", "", 0)
USB2_ENDPOINT_SELECT.USB2_ENDPOINT_SELECT_INDEX                                  = c_bits(USB2_ENDPOINT_SELECT, 0, 4, 0x1f, 5, "", "")
USB2_ENDPOINT_SELECT.USB2_ENDPOINT_SELECT_RX_NOT_TX                              = c_bits(USB2_ENDPOINT_SELECT, 5, 5, 0x20, 1, "", "")
WATCHDOG_DELAY                                                                   = c_reg(0xf440, 1, 1, 0, "", 32, 65535, 0, 0, "", "", "", "", "", 0, 1, "", "", 0)
WATCHDOG_DISABLE                                                                 = c_reg(0xf442, 1, 1, 0, "", 16, 0, 1, 0, "", "", "", "", "", 0, 1, "", "", 0)
WATCHDOG_DISABLE.WATCHDOG_DISABLE_CODE1                                          = c_enum(WATCHDOG_DISABLE, 26420, "", "")
WATCHDOG_DISABLE.WATCHDOG_DISABLE_CODE2                                          = c_enum(WATCHDOG_DISABLE, 54975, "", "")
WATCHDOG_DISABLE.WATCHDOG_DISABLE_CODE3                                          = c_enum(WATCHDOG_DISABLE, 49950, "", "")
WATCHDOG_DISABLE.WATCHDOG_DEBUG_CODE3                                            = c_enum(WATCHDOG_DISABLE, 15794, "", "")
WATCHDOG_ENABLE                                                                  = c_reg(0xf443, 1, 1, 0, "", 1, 0, 1, 0, "", "", "", "", "", 0, 1, "", "", 0)
WATCHDOG_ENABLE.WATCHDOG_ENABLE                                                  = c_bits(WATCHDOG_ENABLE, 0, 0, 0x1, 1, "", "")
WATCHDOG_KICK                                                                    = c_reg(0xf444, 1, 1, 0, "", 1, 0, 1, 0, "", "", "", "", "", 0, 1, "", "", 0)
WATCHDOG_KICK.WATCHDOG_KICK                                                      = c_bits(WATCHDOG_KICK, 0, 0, 0x1, 1, "", "")
WATCHDOG_KICK_PENDING                                                            = c_reg(0xf445, 1, 0, 0, "", 1, 0, 0, 0, "", "", "", "", "", 0, 1, "", "", 0)
WATCHDOG_KICK_PENDING.WATCHDOG_KICK_PENDING                                      = c_bits(WATCHDOG_KICK_PENDING, 0, 0, 0x1, 1, "", "")
WATCHDOG_SLOW_KICK_PENDING                                                       = c_reg(0xf447, 1, 0, 0, "", 1, 0, 0, 0, "", "", "", "", "", 0, 1, "", "", 0)
WATCHDOG_SLOW_KICK_PENDING.WATCHDOG_SLOW_KICK_PENDING                            = c_bits(WATCHDOG_SLOW_KICK_PENDING, 0, 0, 0x1, 1, "", "")
WATCHDOG_STATUS                                                                  = c_reg(0xf446, 1, 0, 0, "", 4, 0, 0, 0, "", "", "", "", "", 0, 1, "", "", 0)
WATCHDOG_STATUS.WATCHDOG_STATUS                                                  = c_bits(WATCHDOG_STATUS, 0, 3, 0xf, 4, "", "")