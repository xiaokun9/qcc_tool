#!/usr/bin/env python
# -*- coding: utf-8 -*-
############################################################################
# CONFIDENTIAL
#
# Copyright (c) 2013 - 2016 Qualcomm Technologies International, Ltd.
#   
#
############################################################################

#
# Generated Thu May  2 13:46:02 2013 by generateDS.py version 2.9a.
#

from csr.wheels import gstrm
from csr.wheels.global_streams import iprint
import sys
import getopt
import re as re_
import base64
from datetime import datetime, tzinfo, timedelta

etree_ = None
Verbose_import_ = False
(   XMLParser_import_none, XMLParser_import_lxml,
    XMLParser_import_elementtree
    ) = range(3)
XMLParser_import_library = None
try:
    # lxml
    from lxml import etree as etree_
    XMLParser_import_library = XMLParser_import_lxml
    if Verbose_import_:
        iprint("running with lxml.etree")
except ImportError:
    try:
        # cElementTree from Python 2.5+
        import xml.etree.cElementTree as etree_
        XMLParser_import_library = XMLParser_import_elementtree
        if Verbose_import_:
            iprint("running with cElementTree on Python 2.5+")
    except ImportError:
        try:
            # ElementTree from Python 2.5+
            import xml.etree.ElementTree as etree_
            XMLParser_import_library = XMLParser_import_elementtree
            if Verbose_import_:
                iprint("running with ElementTree on Python 2.5+")
        except ImportError:
            try:
                # normal cElementTree install
                import cElementTree as etree_
                XMLParser_import_library = XMLParser_import_elementtree
                if Verbose_import_:
                    iprint("running with cElementTree")
            except ImportError:
                try:
                    # normal ElementTree install
                    import elementtree.ElementTree as etree_
                    XMLParser_import_library = XMLParser_import_elementtree
                    if Verbose_import_:
                        iprint("running with ElementTree")
                except ImportError:
                    raise ImportError(
                        "Failed to import ElementTree from any known place")

def parsexml_(*args, **kwargs):
    if (XMLParser_import_library == XMLParser_import_lxml and
        'parser' not in kwargs):
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        kwargs['parser'] = etree_.ETCompatXMLParser()
    doc = etree_.parse(*args, **kwargs)
    return doc

#
# User methods
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(tzinfo):
            def __init__(self, offset, name):
                self.__offset = timedelta(minutes = offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node, input_name=''):
            return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_integer_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(node, 'Requires sequence of integers')
            return input_data
        def gds_format_float(self, input_data, input_name=''):
            return '%f' % input_data
        def gds_validate_float(self, input_data, node, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_float_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(node, 'Requires sequence of floats')
            return input_data
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_double_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    fvalue = float(value)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(node, 'Requires sequence of doubles')
            return input_data
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % input_data
        def gds_validate_boolean_list(self, input_data, node, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return input_data
        def gds_validate_datetime(self, input_data, node, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = input_data.strftime('%Y-%m-%dT%H:%M:%S')
            else:
                _svalue = input_data.strftime('%Y-%m-%dT%H:%M:%S.%f')
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_parse_datetime(self, input_data, node, input_name=''):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'GMT')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime.strptime(
                        input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime.strptime(
                        input_data, '%Y-%m-%dT%H:%M:%S')
            return dt.replace(tzinfo = tz)

        def gds_validate_date(self, input_data, node, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = input_data.strftime('%Y-%m-%d')
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_parse_date(self, input_data, node, input_name=''):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'GMT')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            return datetime.strptime(input_data,
                '%Y-%m-%d').replace(tzinfo = tz)
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'ascii'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')

#
# Support/utility functions.
#

def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')

def quote_xml(inStr):
    if not inStr:
        return ''
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1

def quote_attrib(inStr):
    s1 = (isinstance(inStr, basestring) and inStr or
          '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1

def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1

def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text

def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass

def raise_parse_error(node, msg):
    if XMLParser_import_library == XMLParser_import_lxml:
        msg = '%s (element %s/line %d)' % (
            msg, node.tag, node.sourceline, )
    else:
        msg = '%s (element %s)' % (msg, node.tag, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace, pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(outfile, level, namespace, name, pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' %
                (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' %
                (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' %
                (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' %
                (self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' %
                (self.name, base64.b64encode(self.value), self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n'
                % (self.category, self.content_type, self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s", "%s"),\n'
                % (self.category, self.content_type, self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write('model_.MixedContainer(%d, %d, "%s",\n' % \
                (self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0):
        self.name = name
        self.data_type = data_type
        self.container = container
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container

def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#

class definitions(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, resource=None, type_=None, transaction=None, sap=None):
        if resource is None:
            self.resource = []
        else:
            self.resource = resource
        if type_ is None:
            self.type_ = []
        else:
            self.type_ = type_
        if transaction is None:
            self.transaction = []
        else:
            self.transaction = transaction
        if sap is None:
            self.sap = []
        else:
            self.sap = sap
    def factory(*args_, **kwargs_):
        if definitions.subclass:
            return definitions.subclass(*args_, **kwargs_)
        else:
            return definitions(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_resource(self): return self.resource
    def set_resource(self, resource): self.resource = resource
    def add_resource(self, value): self.resource.append(value)
    def insert_resource(self, index, value): self.resource[index] = value
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def add_type(self, value): self.type_.append(value)
    def insert_type(self, index, value): self.type_[index] = value
    def get_transaction(self): return self.transaction
    def set_transaction(self, transaction): self.transaction = transaction
    def add_transaction(self, value): self.transaction.append(value)
    def insert_transaction(self, index, value): self.transaction[index] = value
    def get_sap(self): return self.sap
    def set_sap(self, sap): self.sap = sap
    def add_sap(self, value): self.sap.append(value)
    def insert_sap(self, index, value): self.sap[index] = value
    def hasContent_(self):
        if (
            self.resource or
            self.type_ or
            self.transaction or
            self.sap
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='definitions', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='definitions')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='definitions'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='definitions', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for resource_ in self.resource:
            resource_.export(outfile, level, namespace_, name_='resource', pretty_print=pretty_print)
        for type_ in self.type_:
            type_.export(outfile, level, namespace_, name_='type', pretty_print=pretty_print)
        for transaction_ in self.transaction:
            transaction_.export(outfile, level, namespace_, name_='transaction', pretty_print=pretty_print)
        for sap_ in self.sap:
            sap_.export(outfile, level, namespace_, name_='sap', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='definitions'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('resource=[\n')
        level += 1
        for resource_ in self.resource:
            showIndent(outfile, level)
            outfile.write('model_.resource(\n')
            resource_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('type_=[\n')
        level += 1
        for type_ in self.type_:
            showIndent(outfile, level)
            outfile.write('model_.type_(\n')
            type_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('transaction=[\n')
        level += 1
        for transaction_ in self.transaction:
            showIndent(outfile, level)
            outfile.write('model_.transaction(\n')
            transaction_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('sap=[\n')
        level += 1
        for sap_ in self.sap:
            showIndent(outfile, level)
            outfile.write('model_.sap(\n')
            sap_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'resource':
            obj_ = resource.factory()
            obj_.build(child_)
            self.resource.append(obj_)
        elif nodeName_ == 'type':
            obj_ = type_.factory()
            obj_.build(child_)
            self.type_.append(obj_)
        elif nodeName_ == 'transaction':
            obj_ = transaction.factory()
            obj_.build(child_)
            self.transaction.append(obj_)
        elif nodeName_ == 'sap':
            obj_ = sap.factory()
            obj_.build(child_)
            self.sap.append(obj_)
# end class definitions


class type_(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dvalue=None, resource=None, name=None, basictype='number', signed=None, abbr=None, file=None, subsidiary=None, options=None, size=None, field=None, value=None, mask=None, macro=None):
        self.dvalue = _cast(None, dvalue)
        self.resource = _cast(None, resource)
        self.name = _cast(None, name)
        self.basictype = _cast(None, basictype)
        self.signed = _cast(bool, signed)
        self.abbr = _cast(None, abbr)
        self.file = _cast(None, file)
        self.subsidiary = _cast(bool, subsidiary)
        self.options = _cast(None, options)
        self.size = _cast(int, size)
        if field is None:
            self.field = []
        else:
            self.field = field
        if value is None:
            self.value = []
        else:
            self.value = value
        if mask is None:
            self.mask = []
        else:
            self.mask = mask
        if macro is None:
            self.macro = []
        else:
            self.macro = macro
    def factory(*args_, **kwargs_):
        if type_.subclass:
            return type_.subclass(*args_, **kwargs_)
        else:
            return type_(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_field(self): return self.field
    def set_field(self, field): self.field = field
    def add_field(self, value): self.field.append(value)
    def insert_field(self, index, value): self.field[index] = value
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def add_value(self, value): self.value.append(value)
    def insert_value(self, index, value): self.value[index] = value
    def get_mask(self): return self.mask
    def set_mask(self, mask): self.mask = mask
    def add_mask(self, value): self.mask.append(value)
    def insert_mask(self, index, value): self.mask[index] = value
    def get_macro(self): return self.macro
    def set_macro(self, macro): self.macro = macro
    def add_macro(self, value): self.macro.append(value)
    def insert_macro(self, index, value): self.macro[index] = value
    def get_dvalue(self): return self.dvalue
    def set_dvalue(self, dvalue): self.dvalue = dvalue
    def get_resource(self): return self.resource
    def set_resource(self, resource): self.resource = resource
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_basictype(self): return self.basictype
    def set_basictype(self, basictype): self.basictype = basictype
    def validate_basictype(self, value):
        # Validate type basictype, a restriction on xs:string.
        pass
    def get_signed(self): return self.signed
    def set_signed(self, signed): self.signed = signed
    def get_abbr(self): return self.abbr
    def set_abbr(self, abbr): self.abbr = abbr
    def get_file(self): return self.file
    def set_file(self, file): self.file = file
    def get_subsidiary(self): return self.subsidiary
    def set_subsidiary(self, subsidiary): self.subsidiary = subsidiary
    def get_options(self): return self.options
    def set_options(self, options): self.options = options
    def get_size(self): return self.size
    def set_size(self, size): self.size = size
    def hasContent_(self):
        if (
            self.field or
            self.value or
            self.mask or
            self.macro
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='type', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='type')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='type'):
        if self.dvalue is not None and 'dvalue' not in already_processed:
            already_processed.add('dvalue')
            outfile.write(' dvalue=%s' % (self.gds_format_string(quote_attrib(self.dvalue).encode(ExternalEncoding), input_name='dvalue'), ))
        if self.resource is not None and 'resource' not in already_processed:
            already_processed.add('resource')
            outfile.write(' resource=%s' % (self.gds_format_string(quote_attrib(self.resource).encode(ExternalEncoding), input_name='resource'), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
        if self.basictype is not None and 'basictype' not in already_processed:
            already_processed.add('basictype')
            outfile.write(' basictype=%s' % (quote_attrib(self.basictype), ))
        if self.signed is not None and 'signed' not in already_processed:
            already_processed.add('signed')
            outfile.write(' signed="%s"' % self.gds_format_boolean(self.signed, input_name='signed'))
        if self.abbr is not None and 'abbr' not in already_processed:
            already_processed.add('abbr')
            outfile.write(' abbr=%s' % (self.gds_format_string(quote_attrib(self.abbr).encode(ExternalEncoding), input_name='abbr'), ))
        if self.file is not None and 'file' not in already_processed:
            already_processed.add('file')
            outfile.write(' file=%s' % (self.gds_format_string(quote_attrib(self.file).encode(ExternalEncoding), input_name='file'), ))
        if self.subsidiary is not None and 'subsidiary' not in already_processed:
            already_processed.add('subsidiary')
            outfile.write(' subsidiary="%s"' % self.gds_format_boolean(self.subsidiary, input_name='subsidiary'))
        if self.options is not None and 'options' not in already_processed:
            already_processed.add('options')
            outfile.write(' options=%s' % (self.gds_format_string(quote_attrib(self.options).encode(ExternalEncoding), input_name='options'), ))
        if self.size is not None and 'size' not in already_processed:
            already_processed.add('size')
            outfile.write(' size="%s"' % self.gds_format_integer(self.size, input_name='size'))
    def exportChildren(self, outfile, level, namespace_='', name_='type', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for field_ in self.field:
            field_.export(outfile, level, namespace_, name_='field', pretty_print=pretty_print)
        for value_ in self.value:
            value_.export(outfile, level, namespace_, name_='value', pretty_print=pretty_print)
        for mask_ in self.mask:
            mask_.export(outfile, level, namespace_, name_='mask', pretty_print=pretty_print)
        for macro_ in self.macro:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smacro>%s</%smacro>%s' % (namespace_, self.gds_format_string(quote_xml(macro_).encode(ExternalEncoding), input_name='macro'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='type'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.dvalue is not None and 'dvalue' not in already_processed:
            already_processed.add('dvalue')
            showIndent(outfile, level)
            outfile.write('dvalue = "%s",\n' % (self.dvalue,))
        if self.resource is not None and 'resource' not in already_processed:
            already_processed.add('resource')
            showIndent(outfile, level)
            outfile.write('resource = "%s",\n' % (self.resource,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
        if self.basictype is not None and 'basictype' not in already_processed:
            already_processed.add('basictype')
            showIndent(outfile, level)
            outfile.write('basictype = "%s",\n' % (self.basictype,))
        if self.signed is not None and 'signed' not in already_processed:
            already_processed.add('signed')
            showIndent(outfile, level)
            outfile.write('signed = %s,\n' % (self.signed,))
        if self.abbr is not None and 'abbr' not in already_processed:
            already_processed.add('abbr')
            showIndent(outfile, level)
            outfile.write('abbr = "%s",\n' % (self.abbr,))
        if self.file is not None and 'file' not in already_processed:
            already_processed.add('file')
            showIndent(outfile, level)
            outfile.write('file = "%s",\n' % (self.file,))
        if self.subsidiary is not None and 'subsidiary' not in already_processed:
            already_processed.add('subsidiary')
            showIndent(outfile, level)
            outfile.write('subsidiary = %s,\n' % (self.subsidiary,))
        if self.options is not None and 'options' not in already_processed:
            already_processed.add('options')
            showIndent(outfile, level)
            outfile.write('options = "%s",\n' % (self.options,))
        if self.size is not None and 'size' not in already_processed:
            already_processed.add('size')
            showIndent(outfile, level)
            outfile.write('size = %d,\n' % (self.size,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('field=[\n')
        level += 1
        for field_ in self.field:
            showIndent(outfile, level)
            outfile.write('model_.field(\n')
            field_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('value=[\n')
        level += 1
        for value_ in self.value:
            showIndent(outfile, level)
            outfile.write('model_.value(\n')
            value_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('mask=[\n')
        level += 1
        for mask_ in self.mask:
            showIndent(outfile, level)
            outfile.write('model_.mask(\n')
            mask_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('macro=[\n')
        level += 1
        for macro_ in self.macro:
            showIndent(outfile, level)
            outfile.write('%s,\n' % quote_python(macro_).encode(ExternalEncoding))
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dvalue', node)
        if value is not None and 'dvalue' not in already_processed:
            already_processed.add('dvalue')
            self.dvalue = value
        value = find_attr_value_('resource', node)
        if value is not None and 'resource' not in already_processed:
            already_processed.add('resource')
            self.resource = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('basictype', node)
        if value is not None and 'basictype' not in already_processed:
            already_processed.add('basictype')
            self.basictype = value
            self.validate_basictype(self.basictype)    # validate type basictype
        value = find_attr_value_('signed', node)
        if value is not None and 'signed' not in already_processed:
            already_processed.add('signed')
            if value in ('true', '1'):
                self.signed = True
            elif value in ('false', '0'):
                self.signed = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('abbr', node)
        if value is not None and 'abbr' not in already_processed:
            already_processed.add('abbr')
            self.abbr = value
        value = find_attr_value_('file', node)
        if value is not None and 'file' not in already_processed:
            already_processed.add('file')
            self.file = value
        value = find_attr_value_('subsidiary', node)
        if value is not None and 'subsidiary' not in already_processed:
            already_processed.add('subsidiary')
            if value in ('true', '1'):
                self.subsidiary = True
            elif value in ('false', '0'):
                self.subsidiary = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('options', node)
        if value is not None and 'options' not in already_processed:
            already_processed.add('options')
            self.options = value
        value = find_attr_value_('size', node)
        if value is not None and 'size' not in already_processed:
            already_processed.add('size')
            try:
                self.size = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'field':
            obj_ = field.factory()
            obj_.build(child_)
            self.field.append(obj_)
        elif nodeName_ == 'value':
            obj_ = value.factory()
            obj_.build(child_)
            self.value.append(obj_)
        elif nodeName_ == 'mask':
            obj_ = mask.factory()
            obj_.build(child_)
            self.mask.append(obj_)
        elif nodeName_ == 'macro':
            macro_ = child_.text
            macro_ = self.gds_validate_string(macro_, node, 'macro')
            self.macro.append(macro_)
# end class type_


class value(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, value=None, abbr=None, content=None):
        self.name = _cast(None, name)
        self.value = _cast(None, value)
        self.abbr = _cast(None, abbr)
        self.content = content
    def factory(*args_, **kwargs_):
        if value.subclass:
            return value.subclass(*args_, **kwargs_)
        else:
            return value(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_content(self): return self.content
    def set_content(self, content): self.content = content
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def get_abbr(self): return self.abbr
    def set_abbr(self, abbr): self.abbr = abbr
    def hasContent_(self):
        if (
            self.content is not None
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='value', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='value')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='value'):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_format_string(quote_attrib(self.value).encode(ExternalEncoding), input_name='value'), ))
        if self.abbr is not None and 'abbr' not in already_processed:
            already_processed.add('abbr')
            outfile.write(' abbr=%s' % (self.gds_format_string(quote_attrib(self.abbr).encode(ExternalEncoding), input_name='abbr'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='value', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.content is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%scontent>%s</%scontent>%s' % (namespace_, self.gds_format_string(quote_xml(self.content).encode(ExternalEncoding), input_name='content'), namespace_, eol_))
    def exportLiteral(self, outfile, level, name_='value'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            showIndent(outfile, level)
            outfile.write('value = "%s",\n' % (self.value,))
        if self.abbr is not None and 'abbr' not in already_processed:
            already_processed.add('abbr')
            showIndent(outfile, level)
            outfile.write('abbr = "%s",\n' % (self.abbr,))
    def exportLiteralChildren(self, outfile, level, name_):
        if self.content is not None:
            showIndent(outfile, level)
            outfile.write('content=%s,\n' % quote_python(self.content).encode(ExternalEncoding))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
        value = find_attr_value_('abbr', node)
        if value is not None and 'abbr' not in already_processed:
            already_processed.add('abbr')
            self.abbr = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'content':
            content_ = child_.text
            content_ = self.gds_validate_string(content_, node, 'content')
            self.content = content_
# end class value


class field(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, bytelength=None, name=None, discriminant=None, blocklength=None, suppress=None, ber_encoded=None, default=None, abbr=None, array=None, hidden=None, resource=None, type_=None):
        self.bytelength = _cast(None, bytelength)
        self.name = _cast(None, name)
        self.discriminant = _cast(None, discriminant)
        self.blocklength = _cast(None, blocklength)
        self.suppress = _cast(bool, suppress)
        self.ber_encoded = _cast(bool, ber_encoded)
        self.default = _cast(None, default)
        self.abbr = _cast(None, abbr)
        self.array = _cast(int, array)
        self.hidden = _cast(bool, hidden)
        if resource is None:
            self.resource = []
        else:
            self.resource = resource
        if type_ is None:
            self.type_ = []
        else:
            self.type_ = type_
    def factory(*args_, **kwargs_):
        if field.subclass:
            return field.subclass(*args_, **kwargs_)
        else:
            return field(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_resource(self): return self.resource
    def set_resource(self, resource): self.resource = resource
    def add_resource(self, value): self.resource.append(value)
    def insert_resource(self, index, value): self.resource[index] = value
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def add_type(self, value): self.type_.append(value)
    def insert_type(self, index, value): self.type_[index] = value
    def get_bytelength(self): return self.bytelength
    def set_bytelength(self, bytelength): self.bytelength = bytelength
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_discriminant(self): return self.discriminant
    def set_discriminant(self, discriminant): self.discriminant = discriminant
    def get_blocklength(self): return self.blocklength
    def set_blocklength(self, blocklength): self.blocklength = blocklength
    def get_suppress(self): return self.suppress
    def set_suppress(self, suppress): self.suppress = suppress
    def get_ber_encoded(self): return self.ber_encoded
    def set_ber_encoded(self, ber_encoded): self.ber_encoded = ber_encoded
    def get_default(self): return self.default
    def set_default(self, default): self.default = default
    def get_abbr(self): return self.abbr
    def set_abbr(self, abbr): self.abbr = abbr
    def get_array(self): return self.array
    def set_array(self, array): self.array = array
    def get_hidden(self): return self.hidden
    def set_hidden(self, hidden): self.hidden = hidden
    def hasContent_(self):
        if (
            self.resource or
            self.type_
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='field', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='field')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='field'):
        if self.bytelength is not None and 'bytelength' not in already_processed:
            already_processed.add('bytelength')
            outfile.write(' bytelength=%s' % (self.gds_format_string(quote_attrib(self.bytelength).encode(ExternalEncoding), input_name='bytelength'), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
        if self.discriminant is not None and 'discriminant' not in already_processed:
            already_processed.add('discriminant')
            outfile.write(' discriminant=%s' % (self.gds_format_string(quote_attrib(self.discriminant).encode(ExternalEncoding), input_name='discriminant'), ))
        if self.blocklength is not None and 'blocklength' not in already_processed:
            already_processed.add('blocklength')
            outfile.write(' blocklength=%s' % (self.gds_format_string(quote_attrib(self.blocklength).encode(ExternalEncoding), input_name='blocklength'), ))
        if self.suppress is not None and 'suppress' not in already_processed:
            already_processed.add('suppress')
            outfile.write(' suppress="%s"' % self.gds_format_boolean(self.suppress, input_name='suppress'))
        if self.ber_encoded is not None and 'ber_encoded' not in already_processed:
            already_processed.add('ber_encoded')
            outfile.write(' ber_encoded="%s"' % self.gds_format_boolean(self.ber_encoded, input_name='ber_encoded'))
        if self.default is not None and 'default' not in already_processed:
            already_processed.add('default')
            outfile.write(' default=%s' % (self.gds_format_string(quote_attrib(self.default).encode(ExternalEncoding), input_name='default'), ))
        if self.abbr is not None and 'abbr' not in already_processed:
            already_processed.add('abbr')
            outfile.write(' abbr=%s' % (self.gds_format_string(quote_attrib(self.abbr).encode(ExternalEncoding), input_name='abbr'), ))
        if self.array is not None and 'array' not in already_processed:
            already_processed.add('array')
            outfile.write(' array="%s"' % self.gds_format_integer(self.array, input_name='array'))
        if self.hidden is not None and 'hidden' not in already_processed:
            already_processed.add('hidden')
            outfile.write(' hidden="%s"' % self.gds_format_boolean(self.hidden, input_name='hidden'))
    def exportChildren(self, outfile, level, namespace_='', name_='field', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for resource_ in self.resource:
            resource_.export(outfile, level, namespace_, name_='resource', pretty_print=pretty_print)
        for type_ in self.type_:
            type_.export(outfile, level, namespace_, name_='type', pretty_print=pretty_print)
    def exportLiteral(self, outfile, level, name_='field'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.bytelength is not None and 'bytelength' not in already_processed:
            already_processed.add('bytelength')
            showIndent(outfile, level)
            outfile.write('bytelength = "%s",\n' % (self.bytelength,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
        if self.discriminant is not None and 'discriminant' not in already_processed:
            already_processed.add('discriminant')
            showIndent(outfile, level)
            outfile.write('discriminant = "%s",\n' % (self.discriminant,))
        if self.blocklength is not None and 'blocklength' not in already_processed:
            already_processed.add('blocklength')
            showIndent(outfile, level)
            outfile.write('blocklength = "%s",\n' % (self.blocklength,))
        if self.suppress is not None and 'suppress' not in already_processed:
            already_processed.add('suppress')
            showIndent(outfile, level)
            outfile.write('suppress = %s,\n' % (self.suppress,))
        if self.ber_encoded is not None and 'ber_encoded' not in already_processed:
            already_processed.add('ber_encoded')
            showIndent(outfile, level)
            outfile.write('ber_encoded = %s,\n' % (self.ber_encoded,))
        if self.default is not None and 'default' not in already_processed:
            already_processed.add('default')
            showIndent(outfile, level)
            outfile.write('default = "%s",\n' % (self.default,))
        if self.abbr is not None and 'abbr' not in already_processed:
            already_processed.add('abbr')
            showIndent(outfile, level)
            outfile.write('abbr = "%s",\n' % (self.abbr,))
        if self.array is not None and 'array' not in already_processed:
            already_processed.add('array')
            showIndent(outfile, level)
            outfile.write('array = %d,\n' % (self.array,))
        if self.hidden is not None and 'hidden' not in already_processed:
            already_processed.add('hidden')
            showIndent(outfile, level)
            outfile.write('hidden = %s,\n' % (self.hidden,))
    def exportLiteralChildren(self, outfile, level, name_):
        showIndent(outfile, level)
        outfile.write('resource=[\n')
        level += 1
        for resource_ in self.resource:
            showIndent(outfile, level)
            outfile.write('model_.resource(\n')
            resource_.exportLiteral(outfile, level)
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
        showIndent(outfile, level)
        outfile.write('type_=[\n')
        level += 1
        for type_ in self.type_:
            showIndent(outfile, level)
            outfile.write('model_.typeType(\n')
            type_.exportLiteral(outfile, level, name_='typeType')
            showIndent(outfile, level)
            outfile.write('),\n')
        level -= 1
        showIndent(outfile, level)
        outfile.write('],\n')
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('bytelength', node)
        if value is not None and 'bytelength' not in already_processed:
            already_processed.add('bytelength')
            self.bytelength = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('discriminant', node)
        if value is not None and 'discriminant' not in already_processed:
            already_processed.add('discriminant')
            self.discriminant = value
        value = find_attr_value_('blocklength', node)
        if value is not None and 'blocklength' not in already_processed:
            already_processed.add('blocklength')
            self.blocklength = value
        value = find_attr_value_('suppress', node)
        if value is not None and 'suppress' not in already_processed:
            already_processed.add('suppress')
            if value in ('true', '1'):
                self.suppress = True
            elif value in ('false', '0'):
                self.suppress = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('ber_encoded', node)
        if value is not None and 'ber_encoded' not in already_processed:
            already_processed.add('ber_encoded')
            if value in ('true', '1'):
                self.ber_encoded = True
            elif value in ('false', '0'):
                self.ber_encoded = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('default', node)
        if value is not None and 'default' not in already_processed:
            already_processed.add('default')
            self.default = value
        value = find_attr_value_('abbr', node)
        if value is not None and 'abbr' not in already_processed:
            already_processed.add('abbr')
            self.abbr = value
        value = find_attr_value_('array', node)
        if value is not None and 'array' not in already_processed:
            already_processed.add('array')
            try:
                self.array = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('hidden', node)
        if value is not None and 'hidden' not in already_processed:
            already_processed.add('hidden')
            if value in ('true', '1'):
                self.hidden = True
            elif value in ('false', '0'):
                self.hidden = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'resource':
            obj_ = resource.factory()
            obj_.build(child_)
            self.resource.append(obj_)
        elif nodeName_ == 'type':
            obj_ = typeType.factory()
            obj_.build(child_)
            self.type_.append(obj_)
# end class field


class resource(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        pass
    def factory(*args_, **kwargs_):
        if resource.subclass:
            return resource.subclass(*args_, **kwargs_)
        else:
            return resource(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='resource', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='resource')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='resource'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='resource', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='resource'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        pass
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class resource


class mask(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, mask=None, name=None, value=None, abbr=None):
        self.mask = _cast(None, mask)
        self.name = _cast(None, name)
        self.value = _cast(None, value)
        self.abbr = _cast(None, abbr)
        pass
    def factory(*args_, **kwargs_):
        if mask.subclass:
            return mask.subclass(*args_, **kwargs_)
        else:
            return mask(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_mask(self): return self.mask
    def set_mask(self, mask): self.mask = mask
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_value(self): return self.value
    def set_value(self, value): self.value = value
    def get_abbr(self): return self.abbr
    def set_abbr(self, abbr): self.abbr = abbr
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='mask', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='mask')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='mask'):
        if self.mask is not None and 'mask' not in already_processed:
            already_processed.add('mask')
            outfile.write(' mask=%s' % (self.gds_format_string(quote_attrib(self.mask).encode(ExternalEncoding), input_name='mask'), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            outfile.write(' value=%s' % (self.gds_format_string(quote_attrib(self.value).encode(ExternalEncoding), input_name='value'), ))
        if self.abbr is not None and 'abbr' not in already_processed:
            already_processed.add('abbr')
            outfile.write(' abbr=%s' % (self.gds_format_string(quote_attrib(self.abbr).encode(ExternalEncoding), input_name='abbr'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='mask', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='mask'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.mask is not None and 'mask' not in already_processed:
            already_processed.add('mask')
            showIndent(outfile, level)
            outfile.write('mask = "%s",\n' % (self.mask,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
        if self.value is not None and 'value' not in already_processed:
            already_processed.add('value')
            showIndent(outfile, level)
            outfile.write('value = "%s",\n' % (self.value,))
        if self.abbr is not None and 'abbr' not in already_processed:
            already_processed.add('abbr')
            showIndent(outfile, level)
            outfile.write('abbr = "%s",\n' % (self.abbr,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('mask', node)
        if value is not None and 'mask' not in already_processed:
            already_processed.add('mask')
            self.mask = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
        value = find_attr_value_('value', node)
        if value is not None and 'value' not in already_processed:
            already_processed.add('value')
            self.value = value
        value = find_attr_value_('abbr', node)
        if value is not None and 'abbr' not in already_processed:
            already_processed.add('abbr')
            self.abbr = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class mask


class rmap(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, dvalue=None, type_=None, name=None):
        self.dvalue = _cast(None, dvalue)
        self.type_ = _cast(None, type_)
        self.name = _cast(None, name)
        pass
    def factory(*args_, **kwargs_):
        if rmap.subclass:
            return rmap.subclass(*args_, **kwargs_)
        else:
            return rmap(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_dvalue(self): return self.dvalue
    def set_dvalue(self, dvalue): self.dvalue = dvalue
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='rmap', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='rmap')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='rmap'):
        if self.dvalue is not None and 'dvalue' not in already_processed:
            already_processed.add('dvalue')
            outfile.write(' dvalue=%s' % (self.gds_format_string(quote_attrib(self.dvalue).encode(ExternalEncoding), input_name='dvalue'), ))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            outfile.write(' type=%s' % (self.gds_format_string(quote_attrib(self.type_).encode(ExternalEncoding), input_name='type'), ))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            outfile.write(' name=%s' % (self.gds_format_string(quote_attrib(self.name).encode(ExternalEncoding), input_name='name'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='rmap', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='rmap'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.dvalue is not None and 'dvalue' not in already_processed:
            already_processed.add('dvalue')
            showIndent(outfile, level)
            outfile.write('dvalue = "%s",\n' % (self.dvalue,))
        if self.type_ is not None and 'type_' not in already_processed:
            already_processed.add('type_')
            showIndent(outfile, level)
            outfile.write('type_ = "%s",\n' % (self.type_,))
        if self.name is not None and 'name' not in already_processed:
            already_processed.add('name')
            showIndent(outfile, level)
            outfile.write('name = "%s",\n' % (self.name,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('dvalue', node)
        if value is not None and 'dvalue' not in already_processed:
            already_processed.add('dvalue')
            self.dvalue = value
        value = find_attr_value_('type', node)
        if value is not None and 'type' not in already_processed:
            already_processed.add('type')
            self.type_ = value
        value = find_attr_value_('name', node)
        if value is not None and 'name' not in already_processed:
            already_processed.add('name')
            self.name = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class rmap


class transaction(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, initiator=None, resultant=None, discriminant=None):
        self.initiator = _cast(None, initiator)
        self.resultant = _cast(None, resultant)
        self.discriminant = _cast(None, discriminant)
        pass
    def factory(*args_, **kwargs_):
        if transaction.subclass:
            return transaction.subclass(*args_, **kwargs_)
        else:
            return transaction(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_initiator(self): return self.initiator
    def set_initiator(self, initiator): self.initiator = initiator
    def get_resultant(self): return self.resultant
    def set_resultant(self, resultant): self.resultant = resultant
    def get_discriminant(self): return self.discriminant
    def set_discriminant(self, discriminant): self.discriminant = discriminant
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='transaction', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='transaction')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='transaction'):
        if self.initiator is not None and 'initiator' not in already_processed:
            already_processed.add('initiator')
            outfile.write(' initiator=%s' % (self.gds_format_string(quote_attrib(self.initiator).encode(ExternalEncoding), input_name='initiator'), ))
        if self.resultant is not None and 'resultant' not in already_processed:
            already_processed.add('resultant')
            outfile.write(' resultant=%s' % (self.gds_format_string(quote_attrib(self.resultant).encode(ExternalEncoding), input_name='resultant'), ))
        if self.discriminant is not None and 'discriminant' not in already_processed:
            already_processed.add('discriminant')
            outfile.write(' discriminant=%s' % (self.gds_format_string(quote_attrib(self.discriminant).encode(ExternalEncoding), input_name='discriminant'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='transaction', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='transaction'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.initiator is not None and 'initiator' not in already_processed:
            already_processed.add('initiator')
            showIndent(outfile, level)
            outfile.write('initiator = "%s",\n' % (self.initiator,))
        if self.resultant is not None and 'resultant' not in already_processed:
            already_processed.add('resultant')
            showIndent(outfile, level)
            outfile.write('resultant = "%s",\n' % (self.resultant,))
        if self.discriminant is not None and 'discriminant' not in already_processed:
            already_processed.add('discriminant')
            showIndent(outfile, level)
            outfile.write('discriminant = "%s",\n' % (self.discriminant,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('initiator', node)
        if value is not None and 'initiator' not in already_processed:
            already_processed.add('initiator')
            self.initiator = value
        value = find_attr_value_('resultant', node)
        if value is not None and 'resultant' not in already_processed:
            already_processed.add('resultant')
            self.resultant = value
        value = find_attr_value_('discriminant', node)
        if value is not None and 'discriminant' not in already_processed:
            already_processed.add('discriminant')
            self.discriminant = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class transaction


class sap(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id=None, downstream=None, upstream=None):
        self.id = _cast(None, id)
        self.downstream = _cast(None, downstream)
        self.upstream = _cast(None, upstream)
        pass
    def factory(*args_, **kwargs_):
        if sap.subclass:
            return sap.subclass(*args_, **kwargs_)
        else:
            return sap(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def get_downstream(self): return self.downstream
    def set_downstream(self, downstream): self.downstream = downstream
    def get_upstream(self): return self.upstream
    def set_upstream(self, upstream): self.upstream = upstream
    def hasContent_(self):
        if (

            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='sap', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='sap')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='sap'):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            outfile.write(' id=%s' % (self.gds_format_string(quote_attrib(self.id).encode(ExternalEncoding), input_name='id'), ))
        if self.downstream is not None and 'downstream' not in already_processed:
            already_processed.add('downstream')
            outfile.write(' downstream=%s' % (self.gds_format_string(quote_attrib(self.downstream).encode(ExternalEncoding), input_name='downstream'), ))
        if self.upstream is not None and 'upstream' not in already_processed:
            already_processed.add('upstream')
            outfile.write(' upstream=%s' % (self.gds_format_string(quote_attrib(self.upstream).encode(ExternalEncoding), input_name='upstream'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='sap', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='sap'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.id is not None and 'id' not in already_processed:
            already_processed.add('id')
            showIndent(outfile, level)
            outfile.write('id = "%s",\n' % (self.id,))
        if self.downstream is not None and 'downstream' not in already_processed:
            already_processed.add('downstream')
            showIndent(outfile, level)
            outfile.write('downstream = "%s",\n' % (self.downstream,))
        if self.upstream is not None and 'upstream' not in already_processed:
            already_processed.add('upstream')
            showIndent(outfile, level)
            outfile.write('upstream = "%s",\n' % (self.upstream,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('id', node)
        if value is not None and 'id' not in already_processed:
            already_processed.add('id')
            self.id = value
        value = find_attr_value_('downstream', node)
        if value is not None and 'downstream' not in already_processed:
            already_processed.add('downstream')
            self.downstream = value
        value = find_attr_value_('upstream', node)
        if value is not None and 'upstream' not in already_processed:
            already_processed.add('upstream')
            self.upstream = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class sap


class typeType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, file=None, valueOf_=None):
        self.file = _cast(None, file)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if typeType.subclass:
            return typeType.subclass(*args_, **kwargs_)
        else:
            return typeType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_file(self): return self.file
    def set_file(self, file): self.file = file
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            self.valueOf_
            ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='typeType', namespacedef_='', pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='typeType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(str(self.valueOf_).encode(ExternalEncoding))
            self.exportChildren(outfile, level + 1, namespace_, name_, pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='typeType'):
        if self.file is not None and 'file' not in already_processed:
            already_processed.add('file')
            outfile.write(' file=%s' % (self.gds_format_string(quote_attrib(self.file).encode(ExternalEncoding), input_name='file'), ))
    def exportChildren(self, outfile, level, namespace_='', name_='typeType', fromsubclass_=False, pretty_print=True):
        pass
    def exportLiteral(self, outfile, level, name_='typeType'):
        level += 1
        already_processed = set()
        self.exportLiteralAttributes(outfile, level, already_processed, name_)
        if self.hasContent_():
            self.exportLiteralChildren(outfile, level, name_)
        showIndent(outfile, level)
        outfile.write('valueOf_ = """%s""",\n' % (self.valueOf_,))
    def exportLiteralAttributes(self, outfile, level, already_processed, name_):
        if self.file is not None and 'file' not in already_processed:
            already_processed.add('file')
            showIndent(outfile, level)
            outfile.write('file = "%s",\n' % (self.file,))
    def exportLiteralChildren(self, outfile, level, name_):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('file', node)
        if value is not None and 'file' not in already_processed:
            already_processed.add('file')
            self.file = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class typeType


GDSClassesMapping = {
    'type': typeType,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""

def usage():
    iprint(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'definitions'
        rootClass = definitions
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    return rootObj


def parseEtree(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'definitions'
        rootClass = definitions
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    rootElement = rootObj.to_etree(None, name_=rootTag)
    content = etree_.tostring(rootElement, pretty_print=True,
        xml_declaration=True, encoding="utf-8")
    gstrm.iout.write(content)
    gstrm.iout.write('\n')
    return rootObj, rootElement


def parseString(inString):
    try:
        from StringIO import StringIO
    except ImportError:
        from io import StringIO
    doc = parsexml_(StringIO(inString))
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'definitions'
        rootClass = definitions
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    gstrm.iout.write('<?xml version="1.0" ?>\n')
    rootObj.export(gstrm.iout, 0, name_="definitions",
        namespacedef_='')
    return rootObj


def parseLiteral(inFileName):
    doc = parsexml_(inFileName)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'definitions'
        rootClass = definitions
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    gstrm.iout.write('#from hip_parser import *\n\n')
    gstrm.iout.write('from datetime import datetime as datetime_\n\n')
    gstrm.iout.write('import hip_parser as model_\n\n')
    gstrm.iout.write('rootObj = model_.rootTag(\n')
    rootObj.exportLiteral(gstrm.iout, 0, name_=rootTag)
    gstrm.iout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "definitions",
    "field",
    "mask",
    "resource",
    "rmap",
    "sap",
    "transaction",
    "typeType",
    "type_",
    "value"
    ]
